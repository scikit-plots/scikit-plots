// Authors: The scikit-plots developers
// SPDX-License-Identifier: BSD-3-Clause

// üõ†Ô∏è https://containers.dev
// üìö https://containers.dev/implementers/spec/#devcontainerjson
// ‚ö†Ô∏è https://containers.dev/implementers/json_schema/#base-schema
// üìö More info about Features:  https://containers.dev/features
// üìö More info about Variables: https://containers.dev/implementers/json_reference/#variables-in-devcontainerjson
// https://containers.dev/implementers/json_reference/#formatting-string-vs-array-properties

// https://oracle.github.io/nosql-dotnet-sdk/api/Oracle.NoSQL.SDK.JsonInputOptions.html

// üìö See the full list here: https://aka.ms/ghcs-default-image
// üìö Learn more here: https://aka.ms/configure-codespace

// Base Schema
{
  // "$schema": "http://json-schema.org/draft-07/schema#",
  // "description": "Defines a dev container",
  // "allowComments": true,  // Gets or sets a value indicating whether comments are allowed in the JSON input.
	// "allowTrailingCommas": true,  // Gets or sets a value indicating whether trailing commas are allowed in the JSON input.
  // "definitions":


  // "dockerfileContainer":
  // "build": {
    // Path is relative to the devcontainer.json file.
    // "dockerfile": "../../docker/Dockerfile",
    // "context": "../..",
    // "args": {}
  // },

  // "buildOptions":
  // "target": {}  // "Target stage in a multi-stage build."
  // "args": {}  // "Build arguments."

  // "imageContainer":
  // https://github.com/github/codespaces-host-images/blob/main/README.md
  // "image": "mcr.microsoft.com/devcontainers/base:ubuntu",  // Use a basic Ubuntu-based image
  // "image": "mcr.microsoft.com/devcontainers/base:alpine",  // Use a basic Ubuntu-based image, user vscode
  // "image": "mcr.microsoft.com/devcontainers/universal:2",  // GitHub Codespaces image also include "conda", also create "venv", user codespace ‚ö†Ô∏è support only initializeCommand ??
  "image": "scikitplot/scikit-plots:latest",  // "scikit-plots latest image"

  // "composeContainer":
  // The order of the files is important since later files override previous ones
  // "dockerComposeFile": ["../docker-compose.yml", "docker-compose.extend.yml"],
  // "dockerComposeFile": "../../docker/docker-compose.yml",
  // "service": "scikit-plots_latest-jupyter",
  // "runServices": ["scikit-plots_latest-jupyter"],
  // "workspaceFolder": "/workspace",  // "The path of the workspace folder inside the container. This is typically the target path of a volume mount in the docker-compose.yml."


  // "nonComposeBase":
  // "containerUser": "root",
  // Use if runtime args required (e.g., GPU for PyTorch, TensorFlow)
  // https://docs.docker.com/reference/cli/docker/container/run/
  "runArgs": [
    // "--cap-add=SYS_PTRACE",                           // Allow debugging tools (e.g., gdb, strace)
    // "--security-opt", "seccomp=unconfined",           // Disable syscall filtering for debugging tools
    // "--entrypoint", "bash"                           // Override entrypoint to bash

    // Uncomment below lines if you need root user inside container
    // "--user", "root",                                 // Run container as root (avoid su/sudo in scripts)

    // ‚ö†Ô∏è Uncomment to enable GPU support (requires host NVIDIA + Docker setup)
    // "--gpus", "all"                                   // Enable GPU access inside the container
  ],
  // "workspaceFolder": "/workspace",                    // "The path of the workspace folder inside the container."
  // "workspaceMount": "/workspace",                     // "The --mount parameter for docker run. The default is to mount the project folder at /workspaces/$project."


  // "devContainerCommon":
  "name": "DevContainer (default)",  // "A name for the dev container which can be displayed to the user."
  // "Host hardware requirements."
  "hostRequirements": {
    // GitHub Codespaces free limit 1 core 120 hours, 2-core, 8gb ram, 32 gb, 4-core, 16gb ram, 32 gb
    "cpus": 2,
    "memory": "8gb",
    "storage": "32gb",
    "gpu": "optional"
  },
  // "Features to add to the dev container."
  // ‚ö†Ô∏è `ERROR: ... : No space left on device`
  "features": {
    // https://containers.dev/features
    // Enable Docker-in-Docker to allow running Docker inside the container
    // "ghcr.io/devcontainers/features/docker-in-docker:2": {},
    // Provides a lightweight desktop environment (e.g., for GUI applications)
    // "ghcr.io/devcontainers/features/desktop-lite:1": {},
    // Enables SSH access to the container
    // "ghcr.io/devcontainers/features/sshd:1": {},
    // Common utilities like zsh, bash-completion, etc.
    // "ghcr.io/devcontainers/features/common-utils:2.5.2": {},
    // GitHub CLI for interacting with GitHub from the terminal
    // "ghcr.io/devcontainers/features/github-cli:1": {},
    // Installs various APT packages required for development
    // "ghcr.io/rocker-org/devcontainer-features/apt-packages:1": {
    //   "packages": [
    //     // switch users safely
    //     "sudo",                                       // can be heavy & buggy
    //     // üë∑ Use gosu user ... inside Dockerfile or scripts to run as a different user safely
    //     "gosu",                                       // designed for Docker (safer alternative to sudo in Docker)

    //     // Text editors and utilities
    //     "vim",
    //     "nano",
    //     "wget",
    //     "curl",
    //     "procps",

    //     // Git and related tools
    //     "git",
    //     // "git-lfs",

    //     // Archive utilities
    //     // "bzip2",
    //     // "gzip",
    //     // "p7zip-full",
    //     // // "p7zip-rar",
    //     // "tar",
    //     // // "unrar",
    //     // "unzip",

    //     // Documentation tools
    //     // "pandoc",                                     // Converts notebooks to HTML

    //     // File and directory utilities
    //     // "tree",

    //     // // Graph visualization software
    //     // "graphviz",

    //     // Multimedia tools
    //     // "ffmpeg",                                     // Needed for matplotlib animations
    //     // // "inkscape",                                   // Vector graphics editor

    //     // Build tools
    //     // "make",
    //     // "cmake",
    //     // "ninja-build",
    //     // "pkg-config",

    //     // Python-related tools
    //     // "python3-pip",
    //     // "python3-venv",
    //     // "python3-dev",

    //     // Compilers and build dependencies
    //     "build-essential",                            // Essential build tools (gcc, g++, make, etc.)
    //     // "gcc",                                        // C (GNU Compiler Collection) ‚Äî Compiles standard C code
    //     // "g++",                                        // C++ (GNU Compiler Collection) ‚Äî Compiles C++ code (automatically links with libstdc++)
    //     "gfortran"                                   // GNU Fortran compiler ‚Äî used for scientific/legacy code (e.g. LAPACK)

    //     // C, C++, Obj-C, OpenCL, etc.	LLVM-based alternative to GCC ‚Äî faster, modern tooling (formatting, lint)
    //     // ‚ÑπÔ∏è Note: clang does not automatically link against the C++ standard library ‚Äî for C++ you should invoke it via clang++
    //     // "clang",                                      // LLVM-based alternative to GCC ‚Äî faster, modern tooling (formatting, lint)
    //     // "clang-format",                               // LLVM tools Formats C++ and other languages
    //     // "clang-tidy",                                 // LLVM tools Static analysis for C++

    //     // Linear Algebra and Numerical Libraries
    //     // OpenBLAS ‚Äì Optimized BLAS implementation (multi-threaded, SIMD)
    //     // "libopenblas-dev",                            // For high-performance matrix/vector ops (used in NumPy, SciPy)
    //     // Reference BLAS implementation (baseline, less optimized)
    //     // "libblas-dev",                                // Standard BLAS, may be overridden by OpenBLAS dynamically
    //     // LAPACK ‚Äì Advanced linear algebra: eigenvalues, SVD, etc.
    //     // "liblapack-dev",                              // Required for scientific and engineering computations
    //     // BLIS ‚Äì Alternative to OpenBLAS (used in AMD EPYC optimizations)
    //     // "libblis-dev",                                // Optional, can be tuned for specific architectures

    //     // Parallel Computing Libraries
    //     // Intel MKL ‚Äì Highly optimized math kernels (not always open source)
    //     // "libmkl-dev",                                 // May conflict with OpenBLAS; check compatibility
    //     // Intel TBB ‚Äì Task-based parallelism in C++
    //     // "libtbb-dev",                                 // Used in threading, e.g., OpenCV, oneAPI
    //     // OpenMP ‚Äì Multithreading support for C/C++/Fortran
    //     // "libomp-dev"                                 // Enables `#pragma omp` parallelism in C/C++/Fortran

    //     // Boost C++ Libraries needs g++/clang++ ‚Äî Required to use Boost libraries in C++ code
    //     // Installs the entire Boost C++ library development suite (headers + libs)
    //     // Boost is a large set of C++ libraries that extend the standard library.
    //     // Includes things like: Boost.Filesystem, Boost.Thread, Boost.Asio, Boost.Python, etc.
    //     // Used for advanced C++ projects (e.g., networking, multithreading, serialization).
    //     // Boost components, prefer libboost-xyz-dev packages (e.g., libboost-filesystem-dev, libboost-thread-dev) to reduce image size.
    //     // "libboost-all-dev"                           // Boost headers and prebuilt libs
    //   ]
    // }
  },
  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  "forwardPorts": [8888],
  "portsAttributes": {
    "8888": {
      "label": "desktop"
    }
  },
  // This will run the container as root but then switch to "codespace" for your dev session.
  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
  // "updateRemoteUserUID ": "true",  // "Controls whether on Linux the container's user should be updated with the local user's UID and GID. On by default when opening from a local folder."
  // "remoteUser": "codespace",  // "The username to use for spawning processes in the container including lifecycle scripts and any remote editor/IDE server process. The default is the same user as the container."

  // ‚ö†Ô∏è `ERROR: ... : No space left on device`
  // https://containers.dev/implementers/json_schema/
  // If this is a single string, it will be run in a shell.
  // If this is an array of strings, it will be run as a single command without shell. Recommended use with script file.
  // If this is an dict object, each provided command will be run in parallel. Recommended for multiple task.
  // "placeholderCommand": {  // "do something (e.g. str, array aka list, object aka dict[str, [str, list]])..."
  //   // (optional) Single string form: Might break if the container has a minimal shell or /bin/sh != bash
  //   // (recommended) Array form with "bash -c": run the given string using "bash -c", which executes the whole line as a single shell command ‚Äî just like in a terminal.
  //   // "placeholderTask": "do something (e.g. str, array aka list)..."
  //   // "message_sample": "echo 'Running placeholderCommand...'"
  // },
  // ‚ö†Ô∏è Some images Runs only "initializeCommand" not to run other below Commands (e.g., devcontainers, jupyter)
  // "initializeCommand": "docker pull mcr.microsoft.com/devcontainers/universal:2",  // str
  // "initializeCommand": ["bash", "docker pull", "mcr.microsoft.com/devcontainers/universal:2"],  // list
  "initializeCommand": {  // dict[str, [str,list]] (Runs Parallelly)
    "message1": "echo '‚úÖ Running initializeCommand...'"
    // "docker_pull": "docker pull mcr.microsoft.com/devcontainers/universal:2"
    // DevContainer notice
    // "notice": "sudo -n true && sudo mkdir -p /usr/local/etc/vscode-dev-containers && sudo cp .devcontainer/scripts/bash-first-run-notice.txt /usr/local/etc/vscode-dev-containers/bash-first-run-notice.txt || true"
    // "sp_init": "bash -c 'apt-get update && apt-get install -y sudo gosu && { . docker/scripts/bash_first_run_notice.sh; } || true'"
  },
  // VAR=value command for dev version
  // "onCreateCommand": "SCIKITPLOT_VERSION= bash .devcontainer/scripts/all_post_create.sh || true",
  "onCreateCommand": {
    "message2": "echo '‚úÖ Running onCreateCommand...'"
  },
  "updateContentCommand": {
    "message3": "echo '‚úÖ Running updateContentCommand...'"
  },
  "postCreateCommand": {  // Use 'postCreateCommand' to run commands after the container is created.
    "message4": "echo '‚úÖ Running postCreateCommand...'"
  },
  "postStartCommand": {
    "message5": "echo '‚úÖ Running postStartCommand...'"
  },
  "postAttachCommand": {
    "message6": "echo '‚úÖ Running postAttachCommand...'"
  },
  "waitFor": "postCreateCommand",  // "The user command to wait for before continuing execution in the background while the UI is starting up. The default is \"updateContentCommand\"."

  // Configure tool-specific properties.
  // "Tool-specific configuration. Each tool should use a JSON object subproperty with a unique name to group its customizations."
  "customizations": {
    // Configure properties specific to VS Code.
    "vscode": {
      // Add the IDs of extensions you want installed when the container is created.
      "extensions": [
        // === Python Development ===
        "ms-python.python",                           // Python language support
        "ms-toolsai.jupyter",                         // Jupyter Notebook support
        "ms-toolsai.vscode-jupyter-slideshow",        // Jupyter Slide Show

        // === Formatter extension ===
        "ms-python.isort",                            // Import sorting extension
        "ms-python.autopep8",                         // autopep8 formatter
        "ms-python.flake8",                           // Flake8 extension
        "ms-python.black-formatter",                  // Black code formatter
        "ms-python.mypy-type-checker",                // Mypy extension
        "ms-python.pylint",                           // Pylint extension
        "charliermarsh.ruff",                         // Ruff linter
        // "ms-pyright.pyright",                         // Static Type Checker for Python

        // === Shell & Terminal ===
        "ms-vscode.makefile-tools",                   // Makefile support
        // "ms-vscode.cmake-tools",                      // CMake Tools
        // "foxundermoon.shell-format",                  // Shell script formatting
        // "timonwong.shellcheck",                       // Shell script linting

        // === Web Development ===
        "ms-vscode.live-server",                      // Live Server
        // "ritwickdey.liveserver",                      // Alternative Live Server
        // "esbenp.prettier-vscode",                     // Prettier formatter for JS, HTML, etc.

        // === Git & Productivity ===
        "github.vscode-pull-request-github"          // GitHub PRs and Issues
        // "eamodio.gitlens",                            // Git supercharged
        // "donjayamanne.githistory",                    // View git history
        // "mhutchie.git-graph",                         // Interactive Git graph

        // === C/C++ Development ===
        // "ms-vscode.cpptools",                         // C/C++ IntelliSense, debugging, etc.
        // "ms-vscode.cpptools-extension-pack",          // C/C++ IntelliSense, debugging, etc.
        // "llvm-vs-code-extensions.vscode-clangd",      // Clang language server
        // "jeff-hykin.better-cpp-syntax",               // Better syntax highlighting

        // === continuous integration and continuous deployment (CI/CD) platform used to automate software builds, tests, and deployments ===
        // "ms-azuretools.vscode-docker",                // Docker for Visual Studio Code
        // "ms-azuretools.vscode-azureterraform",        // azureterraform
        // "HashiCorp.terraform",                        // terraform
        // "circleci.circleci",

        // === GenAI ===
        // "genaiscript.genaiscript-vscode",             // GenAIScript

        // === Markdown & Docs ===
        // "yzhang.markdown-all-in-one",                 // Markdown enhancements
        // "stkb.rewrap",                                // Auto-wrap text and comments
        // "bierner.markdown-mermaid",                   // Support for Mermaid diagrams in Markdown

        // === Learn extension ===
        // "docsmsft.docs-markdown",                     // Learn Markdown Extension
        // "ms-vscode.copilot-mermaid-diagram",          // vscode-mermAId
        // "docsmsft.docs-yaml",                         // Docs YAML Extension
        // "azurepaas-tools.vscode-learncloud",          // Learn Cloud
      ],
      "settings": {
        "terminal.integrated.shell.linux": "/bin/bash",
        "markdown.preview.autoShowPreviewToSide": true,
        "editor.tabSize": 4,

        // "python.pythonPath": "/usr/bin/python3",
        // "python.defaultInterpreterPath": "/opt/conda/bin/python",  // for notebook
        "python.testing.unittestEnabled": false,
        "python.testing.pytestEnabled": true
      }
    },
    "codespaces": {
      "openFiles": [
        ".devcontainer/scripts/bash-first-run-notice.txt",
        "docs/source/devel/codespaces.md",
        "README.md"
      ]
    }
  }
}
