# Labeler Pull Request
---
name: "PRs ü§ñ Labeler/Notifier"

on:
  ## Can write comments / labels on PR from fork?
  ## Use pull_request_target trigger if you're targeting a pull request from a fork:
  ## pull_request_target triggers run with the base repo code, and has write permissions.
  ## pull_request:  Safer alternative to pull_request_target:
  ## pull_request triggers run with the PR code, but no write access to secrets or repo.
  pull_request_target: # zizmor: ignore[dangerous-triggers]
    # types: [opened, reopened, synchronize, edited]  # Triggers only on these events

## simultaneity
## This ensures that only one deployment to "production" can happen at a time.
## If a new commit is pushed before the current job finishes, the in-progress job is canceled.
concurrency:
  ## Ensures that only one instance of this workflow runs per branch or PR at a time.
  ## The 'group' key defines a unique concurrency group:
  ## - github.workflow: Name of the workflow file.
  ## - github.head_ref: (Only on pull_request) The name of the branch from which the PR was created (source branch). Example: "feature/add-login"
  ## - github.run_id: (Always) A unique numeric ID for each run of a workflow. Useful as a fallback for uniqueness. Example: 6432789156
  ## - github.ref: (Always) The full ref path of the branch or tag that triggered the workflow. Examples: For a push to a branch: "refs/heads/main" For a PR: "refs/pull/42/merge" For a tag: "refs/tags/v1.0.0"
  ## - github.ref_name: (Always) Just the final part of the ref path (branch or tag name, does not exist for PRs). Examples: For a push to a branch: "main" For a tag: "v1.0.0"
  ## This ensures: PRs use head_ref, Pushes/Tags use ref or ref_name, Fallback to run_id in edge cases
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  ## If you push multiple times quickly, older runs would continue even though newer ones have started.
  ## Canceling previous runs reduces resource usage and speeds up feedback.
  ## If a new run is triggered for the same group, cancel the in-progress one.
  cancel-in-progress: true

## Top-level permissions (outside jobs)
## Job-level permissions (inside a specific job)
## Restrict the permissions granted to the use of secrets.GITHUB_TOKEN in this
## github actions workflow:
## https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions:
  ## only required for workflows in private repositories
  contents: read  # for actions/checkout to fetch code
  pull-requests: write  # Full access to read and modify PRs (e.g., labels, comments)
  issues: write   # Full access to read and modify PRs (e.g., labels, comments)

## Global environment variables (available to all jobs and steps)
## Job-level environment variables (override global, scoped to this job)
## Step-level environment variables (override job + global, scoped to this step)

jobs:
  labeler:
    name: "PRs Labeler/Notifier Automatically"
    runs-on: ubuntu-latest

    # To enable this workflow on a fork, comment out:
    if: github.repository == 'scikit-plots/scikit-plots'

    # Optional: Restrict to Safe Users (e.g., internal team only)
    # if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      ## üì• Checkout the Git repository into the runner
      - name: "‚¨áÔ∏è Checkout (cloned) repository with full history"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # Prevents accidental credential exposure
          # submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          lfs: true
          ## Gets the correct commit message for pull request
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: 'Reviewer Checklist'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        if: github.event.action == 'opened'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Thank you for your contribution to scikit-plotsüëã!

              ‚úçÔ∏è This checklist is meant to remind the package maintainers who will review this pull request of some common things to look for.

              ## Maintainer's Pull Request Review Checklist

              - [ ] Do the proposed changes actually accomplish desired goals?
              - [ ] Do the proposed changes follow the [scikit-plots coding guidelines](https://scikit-plots.github.io/dev/devel/index.html)?
              - [ ] Are tests added/updated as required? If so, do they follow the [scikit-plots testing guidelines](https://scikit-plots.github.io/dev/devel/index.html)?
              - [ ] Are docs added/updated as required? If so, do they follow the [scikit-plots documentation guidelines](https://scikit-plots.github.io/dev/devel/index.html)?
              - [ ] Is rebase and/or squash necessary? If so, please provide the author with appropriate instructions. Also see instructions for [rebase](https://scikit-plots.github.io/dev/devel/index.html) and [squash](https://scikit-plots.github.io/dev/devel/index.html).
              - [ ] Did the CI pass? If no, are the failures related? If you need to run daily and weekly cron jobs as part of the PR, please apply the "Extra CI" label. Codestyle issues can be fixed by the [bot](https://scikit-plots.github.io/dev/devel/index.html).
              - [ ] Is a change log needed? If yes, did the change log check pass? If no, add the "no-changelog-entry-needed" label. If this is a manual backport, use the "skip-changelog-checks" label unless special changelog handling is necessary.
              - [ ] Is this a big PR that makes a "What's new?" entry worthwhile and if so, is (1) a "what's new" entry included in this PR and (2) the "whatsnew-needed" label applied?
              - [ ] At the time of adding the milestone, if the milestone set requires a backport to release branch(es), apply the appropriate "backport-X.Y.x" label(s) *before* merge.`
            })

      # label based on PR glob files
      - name: label based on changed files
        # uses: thomasjpfan/labeler@v2.5.1
        # uses: actions/labeler@ac9175f8a1f3625fd0d4fb234536d26811351594 # v4.3.0
        uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9 # v5.0.0
        # if: github.repository == 'scikit-plots/scikit-plots'
        continue-on-error: true
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          sync-labels: false
          dot: true
          # max-labels: "4"  # thomasjpfan
          configuration-path: ".github/labeler.yml"  # ".github/labeler.yml"

      # label based on PR glob files
      - name: label based on module changed files
        uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9 # v5.0.0
        # if: github.repository == 'scikit-plots/scikit-plots'
        continue-on-error: true
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          sync-labels: false
          dot: true
          # max-labels: "4"  # thomasjpfan
          configuration-path: ".github/labeler-by-module.yml"  # ".github/labeler.yml"

      # label based on Issue title
      - name: label based on PR title
        uses: github/issue-labeler@c1b0f9f52a63158c4adc09425e858e87b32e9685 # v3.4
        # if: github.repository == 'scikit-plots/scikit-plots'
        continue-on-error: true
        with:
          # repo-token: ${{ github.token }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          enable-versioned-regex: 0
          include-body: 0
          include-title: 1
          configuration-path: ".github/labeler-issue.yml"  # ".github/labeler.yml"

      # label based on PR Prefix
      - name: Labeler PR Prefix
        # https://github.com/gerrymanoim/pr-prefix-labeler
        # pr-prefix-labeler.yml
        uses: gerrymanoim/pr-prefix-labeler@c8062327f6de59a9ae1c19f7f07cacd0b976b6fa # v3
        # if: github.repository == 'scikit-plots/scikit-plots'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: ".github/pr-prefix-labeler.yml"

      # label based on PR regex title
      #- name: Checkout (cloned) repository with full history
      #  uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      #  with:
      #    persist-credentials: false  # Prevents accidental credential exposure
      #    # submodules: true  # Fetch Hugo themes (true OR recursive)
      #    fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      # - name: "Debug: Check file existence"
      #   run: ls -lR .github/

      # - name: Python Setup
      #   uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
      #   with:
      #     python-version: '3.11'

      # - name: Install PyGithub
      #   run: |
      #     pip install -Uq PyGithub

      # - name: Label pull request
      #   run: python .github/scripts/label_title_regex.py
      #   env:
      #     CONTEXT_GITHUB: ${{ toJson(github) }}

      - name: 'Comment Draft PR'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        if: github.event.pull_request.draft == true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üëã Thank you for your draft pull request!
              Do you know that you can use \`[ci skip]\` or \`[skip ci]\` in your commit messages to skip running continuous integration tests until you are ready?`
            })
