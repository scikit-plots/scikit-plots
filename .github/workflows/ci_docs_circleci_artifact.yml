# Sync with .circleci/config.yml or project settings
#
# To enable this workflow on a fork, comment out:
#
# if: "${{ github.repository == 'scikit-plots/scikit-plots' }}"
#
# github.repository â†’ the base repo (your main repo)
# github.event.pull_request.head.repo.full_name â†’ the origin (PR source)
---
# CircleCI does not natively report artifact URLs back to GitHub PRs or commits.
# You build HTML docs (or any artifact) on CircleCI.
# You want reviewers to easily preview the rendered docs from the PR.
# But CircleCI doesn't automatically post the preview URL to the GitHub PR.
#
# Why not just link directly? CircleCI artifact URLs:
# Are non-predictable (they contain job UUIDs).
# Expire in ~30 days.
# Are only known after the job runs.
name: "CI ðŸ“˜ Docs Preview Link Post CircleCI"

# GitHub has no internal knowledge of CircleCI steps â€” only the "status" update that CircleCI posts to GitHub
# "status" too many action trigger
on: # [status]
  workflow_dispatch: # Allows manual triggering of the workflow
  # status:  # Currently we dont need Useful for pull_request preview like "docs/readthedocs.org:"-style status check
    # branches: [ "main", "*.X" ]
    # branches:
    #   - main
    #   ## Release branches
    #   - maintenance/**

## simultaneity
## This ensures that only one deployment to "production" can happen at a time.
## If a new commit is pushed before the current job finishes, the in-progress job is canceled.
concurrency:
  ## Ensures that only one instance of this workflow runs per branch or PR at a time.
  ## The 'group' key defines a unique concurrency group:
  ## - github.workflow: Name of the workflow file.
  ## - github.head_ref: (Only on pull_request) The name of the branch from which the PR was created (source branch). Example: "feature/add-login"
  ## - github.run_id: (Always) A unique numeric ID for each run of a workflow. Useful as a fallback for uniqueness. Example: 6432789156
  ## - github.ref: (Always) The full ref path of the branch or tag that triggered the workflow. Examples: For a push to a branch: "refs/heads/main" For a PR: "refs/pull/42/merge" For a tag: "refs/tags/v1.0.0"
  ## - github.ref_name: (Always) Just the final part of the ref path (branch or tag name, does not exist for PRs). Examples: For a push to a branch: "main" For a tag: "v1.0.0"
  ## This ensures: PRs use head_ref, Pushes/Tags use ref or ref_name, Fallback to run_id in edge cases
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  ## If you push multiple times quickly, older runs would continue even though newer ones have started.
  ## Canceling previous runs reduces resource usage and speeds up feedback.
  ## If a new run is triggered for the same group, cancel the in-progress one.
  cancel-in-progress: true

## Top-level permissions (outside jobs)
## Job-level permissions (inside a specific job)
## Restrict the permissions granted to the use of secrets.GITHUB_TOKEN in this
## github actions workflow:
## https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions: read-all  # to fetch code (actions/checkout)
#  contents: read  # to fetch code (actions/checkout)

## Global environment variables (available to all jobs and steps)
## Job-level environment variables (override global, scoped to this job)
## Step-level environment variables (override job + global, scoped to this step)
# env:
#   ## Initially set IS_SKIP as false (you can set it to true here if you prefer a different default value)
#   IS_SKIP: false  # ${{ env.IS_SKIP == 'false' }}

jobs:
  circleci_artifacts_redirector_job:
    name: "ðŸ“˜ CI Docs Preview Link Post CircleCI Artifact Redirector"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      statuses: write
      pull-requests: write  # needed to remove PR labels
      # issues: write

    # To enable this workflow on a fork, comment out:
    # if: "github.repository == 'numpy/numpy' && !contains(github.event.head_commit.message, '[circle skip]') && !contains(github.event.head_commit.message, '[skip circle]')  && github.event.context == 'ci/circleci: build'"
    # Filter for CircleCI's build_docs, 'ci/circleci: build_docs' is the GitHub status check name set by CircleCI
    if: >-
      github.repository == 'scikit-plots/scikit-plots'
      && !contains(github.event.head_commit.message, '[circle skip]')
      && !contains(github.event.head_commit.message, '[skip circle]')
      && github.event.context == 'ci/circleci: build_docs'
      && github.event.state == 'success'

    steps:
      ## Can write comments / labels on PR from fork?
      ## automatically adds predefined labels to all incoming PRs
      # - name: Auto-label new PR (only on first open)
      #   uses: actions-ecosystem/action-add-labels@18f1af5e3544586314bbe15c0273249c770b2daf # v1.1.3
      #   if: >-
      #     github.event.action == 'opened'
      #     && !contains(join(github.event.pull_request.labels.*.name, ','), 'circle skip')
      #     || !contains(join(github.event.pull_request.labels.*.name, ','), 'skip circle')
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     labels: |
      #       circle skip
      #       skip circle
      # - name: 'Determine if "circle skip" or "skip circle" label is present'
      #   id: check_skip
      #   env:
      #     LABELS_JSON: ${{ toJson(github.event.pull_request.labels) }}
      #   run: |
      #     LABELS_TO_SKIP=("skip circle" "circle skip")
      #     for label in "${LABELS_TO_SKIP[@]}"; do
      #       if echo "$LABELS_JSON" | grep -Fq "\"name\":\"$label\""; then
      #         echo "IS_SKIP=true" >> $GITHUB_OUTPUT
      #         exit 0
      #       # else
      #       fi
      #     done
      #     echo "IS_SKIP=false" >> $GITHUB_OUTPUT


      - name: "ðŸ”— Redirect to Post CircleCI Artifact Link"
        id: docs_link_redirector
        # uses: larsoner/circleci-artifacts-redirector-action@4e13a10d89177f4bfc8007a7064bdbeda848d8d1 # master
        uses: scientific-python/circleci-artifacts-redirector-action@7eafdb60666f57706a5525a2f5eb76224dc8779b # v1.1.0
        # Run step only if IS_SKIP is false
        # if: steps.check_skip.outputs.IS_SKIP == 'false'
        continue-on-error: true
        # env:
          # Capture the output of the redirector step by giving it an id, for example:
          # ACTIONS_STEP_DEBUG: true  # optional but helps debug
        with:
          # api_token: ${{ env.CIRCLE_TOKEN }}
          api-token: ${{ secrets.CIRCLE_TOKEN }}  # Only if CircleCI project is private
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          artifact-path: 0/docs/build/html/stable/index.html
          circleci-jobs: build_docs
          job-title: ðŸ“˜ Check the rendered Preview Docs here!

      # - name: "ðŸ”— Print redirected docs preview URL"
      #   # "url": "https://output.circle-artifacts.com/output/job/[JOB-ID]/artifacts/0/docs/build/html/stable/index.html"
      #   run: echo "Docs Preview URL ${{ steps.docs_link_redirector.outputs.url }}"
      #   continue-on-error: true


      # - name: âœ… Set Commit Status for Docs  # "docs/circleci.org:scikit-plots"
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
      #   continue-on-error: true
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     args: |
      #       targetUrl=${{ steps.docs_link_redirector.outputs.url }}
      #     script: |
      #       const targetUrl = args.targetUrl;
      #       await github.rest.repos.createCommitStatus({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         sha: context.sha,
      #         state: "success",
      #         context: "docs/circleci.org:scikit-plots",
      #         target_url: targetUrl,
      #         description: "Docs Preview is ready!"
      #       });
      #     # script: |
      #     #   const targetUrl = "${{ steps.docs_link_redirector.outputs.url }}";
      #     #   await github.rest.repos.createCommitStatus({
      #     #     owner: context.repo.owner,
      #     #     repo: context.repo.repo,
      #     #     sha: context.payload.pull_request.head.sha,
      #     #     state: "success",
      #     #     context: "docs/circleci.org:scikit-plots",
      #     #     target_url: targetUrl,
      #     #     description: "Docs Preview is ready!"
      #     #   });
      # - name: ðŸ’¬ Comment rendered docs preview on PR
      #   uses: marocchino/sticky-pull-request-comment@67d0dec7b07ed060a405f9b2a64b8ab319fdd7db # v2.9.2
      #   # if: github.event_name == 'pull_request'
      #   continue-on-error: true
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     header: docs-preview
      #     message: |
      #       ðŸ“˜ **Preview the rendered docs here**:
      #       ðŸ”— [Open Docs Preview](${{ steps.docs_link_redirector.outputs.url }})
