# Workflow to build and test wheels.
# To work on the wheel building infrastructure on a fork, comment out:
#
# if: github.repository == 'scikit-plots/scikit-plots'
#
# in the get_commit_message job. Be sure to include [wheel build] in your commit
# message to trigger the build. All files related to wheel building are located
# at tools/wheels/
# Alternatively, you can add labels to the pull request in order to trigger wheel
# builds.
#
# The labels that trigger builds are:
# 36 - Build(for changes to the building process,
# 14 - Release(ensure wheels build before release)
---
# Built distribution (binary or pure Python)
# .whl Designed to be a pre-built, installable package — no build step needed on install.
name: "CI 📦 Wheels Conda"

on:
  ## manually trigger the workflow from the GitHub Actions UI.
  ## Ad-Hoc Scenarios: Use this to rerun workflows with specific parameters or to debug a workflow.
  ## Manual Jobs: When you need a flexible way to trigger a job, such as running a custom deployment or testing process.
  ## Manual Trigger for Flexibility
  workflow_dispatch: # Allows manual triggering of the workflow
  ## triggers a workflow when a pull request (PR) is opened
  ## Code Review: Use this to run tests, checks, or CI pipelines
  ## Pre-Merge Validation: Ensure that changes introduced in the PR won't break
  ## Pull Requests to Ensure Code Quality
  pull_request:
    # branches: [ "main", "*.X" ]
    branches:
      - main
      ## Release branches
      - maintenance/**
    # types:
    #   - opened
    #   - synchronize
    #   - reopened
    #   - labeled  # "ci build wheels"
  ## triggers a workflow when commits are pushed to specific branches or tags.
  ## Releases: Use this to automate packaging or deployment when pushing a versioned tag.
  ## Continuous Deployment (CD): Automatically deploy changes in main or maintenance/ branches.
  ## Push for Continuous Integration or Tagged Releases for Versioned Deployments
  push:
    ## Release by branches|tags
    # branches: [ "main", "*.X" ]
    branches:
      - main
      ## Release branches
      - maintenance/**
    tags:
      - v*
  schedule:
    ## Automatically built and released every night (or at a regular interval, often nightly)
    ## Cron schedule for automated runs
    ## https://crontab.cronhub.io
    ##        ┌────────────────────── minute (0 - 59)
    ##        │  ┌─────────────────── hour (0 - 23)
    ##        │  │ ┌───────────────── day of the month (1 - 31)
    ##        │  │ │ ┌─────────────── month (1 - 12 or JAN-DEC)
    ##        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    ##        │  │ │ │ │
    ## cron: "11 1 * * SUN,WED"  # Runs every Sunday and Wednesday at 01:11 UTC
    - cron: '11 11 * * 1'

## simultaneity
## This ensures that only one deployment to "production" can happen at a time.
## If a new commit is pushed before the current job finishes, the in-progress job is canceled.
concurrency:
  ## Ensures that only one instance of this workflow runs per branch or PR at a time.
  ## The 'group' key defines a unique concurrency group:
  ## - github.workflow: Name of the workflow file.
  ## - github.head_ref: (Only on pull_request) The name of the branch from which the PR was created (source branch). Example: "feature/add-login"
  ## - github.run_id: (Always) A unique numeric ID for each run of a workflow. Useful as a fallback for uniqueness. Example: 6432789156
  ## - github.ref: (Always) The full ref path of the branch or tag that triggered the workflow. Examples: For a push to a branch: "refs/heads/main" For a PR: "refs/pull/42/merge" For a tag: "refs/tags/v1.0.0"
  ## - github.ref_name: (Always) Just the final part of the ref path (branch or tag name, does not exist for PRs). Examples: For a push to a branch: "main" For a tag: "v1.0.0"
  ## This ensures: PRs use head_ref, Pushes/Tags use ref or ref_name, Fallback to run_id in edge cases
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  ## If you push multiple times quickly, older runs would continue even though newer ones have started.
  ## Canceling previous runs reduces resource usage and speeds up feedback.
  ## If a new run is triggered for the same group, cancel the in-progress one.
  cancel-in-progress: true

## Top-level permissions (outside jobs)
## Job-level permissions (inside a specific job)
## Restrict the permissions granted to the use of secrets.GITHUB_TOKEN in this
## github actions workflow:
## https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions:
  ## only required for workflows in private repositories
  contents: read  # to fetch code for actions/checkout

## Global environment variables (available to all jobs and steps)
## Job-level environment variables (override global, scoped to this job)
## Step-level environment variables (override job + global, scoped to this step)
# env:
#   ## Initially set IS_SKIP as false (you can set it to true here if you prefer a different default value)
#   IS_SKIP: true  # ${{ env.IS_SKIP == 'false' }}

## https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions
## https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#example-of-literals
## https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables
jobs:
  ## Check whether to build the wheels and the source tarball
  check_build_trigger:
    name: Check build trigger by Commit Message
    runs-on: ubuntu-latest

    outputs:
      COMMIT_MESSAGE: ${{ steps.id_commit_message.outputs.COMMIT_MESSAGE }}

    # To enable this workflow on a fork, comment out:
    if: github.repository == 'scikit-plots/scikit-plots'

    steps:
      - name: "⬇️ Checkout (cloned) repository with full history"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # Prevents accidental credential exposure
          # submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          lfs: true
          ## Gets the correct commit message for pull request
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get Commit Message
        id: id_commit_message  # $COMMIT_MESSAGE
        ## echo github.ref: "$HEAD"
        ## echo github.ref:  github.ref }}
        run: |
          ## (Optional) Use Utility script by source it
          ## source .github/scripts/utils.sh

          set -ex
          ## Check that COMMIT contains '[wheel build]'
          COMMIT_MSG=$(git log --no-merges -1 --oneline)
          if [[ "$COMMIT_MSG" == *"[wheel build]"* ]]; then
            ## Set COMMIT_MESSAGE to "true" in $GITHUB_OUTPUT
            echo "COMMIT_MESSAGE=true" >> $GITHUB_OUTPUT
          fi

  ## Build the wheels for Linux, Windows and macOS for Python 3.9 and newer
  ## https://peps.python.org/pep-0425/
  ## https://peps.python.org/pep-0427/
  ## The wheel filename is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.
  build_wheels:
    name: >-
      Wheel-${{ matrix.python[0] }}-${{ join(matrix.buildplat, '-') }}
    ## Allows splitting a string across multiple lines while treating it as a single logical line.
    ## ${{ matrix.buildplat[1] && format('-{0}', matrix.buildplat[1]) || '' }}
    ## ${{ matrix.buildplat[2] && format('-{0}', matrix.buildplat[2]) || '' }}
    ## ${{ matrix.buildplat[3] && format('-{0}', matrix.buildplat[3]) || '' }}
    ## ${{ matrix.buildplat[4] && format('-{0}', matrix.buildplat[4]) || '' }}
    ## ${{ matrix.buildplat[1] != '' && '-' || '' }}${{ matrix.buildplat[1] }}
    ## Wheel-cp310-macosx-arm64-accelerate-14.0
    runs-on: ${{ matrix.buildplat[0] }}
    needs: check_build_trigger  # OUTPUT Contains '[wheel build]' or '1'

    ## https://docs.github.com/en/actions/reference/evaluate-expressions-in-workflows-and-actions
    strategy:
      ## Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      ## Dynamic Environment Variables Using Matrix Context
      matrix:
        ## Github Actions doesn't support pairing matrix values together, let's improvise
        ## https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          # should also be able to do multi-archs on a single entry, e.g.
          # [windows-2019, win*, "AMD64 x86"]. However, those two require a different compiler setup
          # so easier to separate out here.
          - [ubuntu-22.04, manylinux, x86_64]
          - [ubuntu-22.04, musllinux, x86_64]
          - [ubuntu-24.04-arm, manylinux, aarch64]
          - [ubuntu-24.04-arm, musllinux, aarch64]
          - [macos-13, macosx, x86_64, openblas, "10.14"]  # Numcpp: C/C++ error: 'path' is unavailable: introduced in macOS 10.15
          - [macos-13, macosx, x86_64, accelerate, "14.0"]
          - [macos-14, macosx, arm64, openblas, "12.3"]
          - [macos-14, macosx, arm64, accelerate, "14.0"]
          - [windows-2022, win, AMD64]  # Window 64 bit ("*-win_amd64", "*-x86_64")
        python: [
          ## python[0] is used to specify the python versions made by cibuildwheel
          # ["pp310", "3.10"],  # pp310 (PyPy 3.10) Slower startup Just-In-Time (JIT) warm-up
          ## Min Py version "3.10" due to array api compat
          ["cp38", "3.8"],  # CPython 3.8 – Stable, but partially without support for some cexternals, externals packages  # need clang llvm on macOS
          ["cp39", "3.9"],  # CPython 3.9 – Stable, but partially without support for some cexternals, externals packages
          ["cp310", "3.10"],  # CPython 3.10 – Broadest library support, stable
          ["cp311", "3.11"],  # CPython 3.11 – Faster, improved error messages
          ["cp312", "3.12"],  # CPython 3.12 – Latest stable release
          ["cp313", "3.13"],  # CPython 3.13 – In development / pre-release
          ["cp313t", "3.13"],  # CPython 3.13 w/ limited support (e.g. for testing; see: https://github.com/scipy/scipy/issues/21970)
          # Keep sync with cibuildwheel's supported Python versions by scikit-learn, numpy, scipy, pandas, etc.
        ]
        exclude:
          # 3.8 is not supported on macOS and musllinux
          - buildplat: [ubuntu-22.04, musllinux, x86_64]
            python: ["cp38", "3.8"]
          - buildplat: [ubuntu-24.04-arm, musllinux, aarch64]
            python: ["cp38", "3.8"]
          - buildplat: [macos-14, macosx, arm64, openblas, "12.3"]
            python: ["cp38", "3.8"]
          - buildplat: [macos-14, macosx, arm64, accelerate, "14.0"]
            python: ["cp38", "3.8"]
          # 3.9 is not supported on musllinux
          - buildplat: [ubuntu-24.04-arm, musllinux, aarch64]
            python: ["cp39", "3.9"]
          # (Optional) Don't build PyPy 32-bit windows ("*-win32", "*-x86")
          # Don't build PyPy 32-bit windows
          - buildplat: [windows-2019, win32,]
            python: ["cp310", "3.10"]
          # No PyPy on musllinux images
          - buildplat: [ubuntu-22.04, musllinux_x86_64]
            python: ["cp310", "3.10"]
          - buildplat: [ubuntu-22.04-arm, musllinux_aarch64]
            python: ["cp310", "3.10"]
          - buildplat: [ macos13, macosx_x86_64, openblas ]
            python: ["cp313t", "3.13"]

    env:  # Job level environment NAME: '', $NAME, ${{ env.NAME }}
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}  # Build platform is 32-bit (e.g., 'x86', 'win32')
      # upload to staging if it's a push to a maintenance branch
      # and the last GIT COMMIT MESSAGE contains '[wheel build]'
      # Check current EVENT is a "push" event
      # Triggered for specific BRANCHES (e.g., main, maintenance/**)
      # Triggered for TAGS starting with 'v'
      IS_PUSH: >-
        ${{
          contains(needs.check_build_trigger.outputs.COMMIT_MESSAGE, 'true') &&
          github.event_name == 'push' &&
          (startsWith(github.ref, 'refs/heads/main') ||
           startsWith(github.ref, 'refs/tags/v') ||
           contains( github.ref,  'maintenance')
          )
        }}
      # Checks if the EVENT is a "schedule" or manual "workflow_dispatch"
      IS_SCHEDULE_DISPATCH: >-
        ${{
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'schedule'
        }}

    if: >-
      contains(needs.check_build_trigger.outputs.COMMIT_MESSAGE, 'true') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'push' &&
       startsWith(github.ref, 'refs/tags/v') &&
       ( ! endsWith(github.ref, 'dev0') )
      )

    steps:
      - name: "⬇️ Checkout (cloned) repository with full history"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # Prevents accidental credential exposure
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          fetch-tags: true

      - name: "🐍 Python Setup"  # Used to push the built wheels
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # python-version: "3.x"
          python-version: "3.11"

      # --- RUNNER_OS ---

      - name: "🛠️ Windows Setup MSVC (32|64-bit)"  # 🔧
        if: ${{ runner.os == 'Windows' }}
        uses: bus1/cabuild/action/msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d  # v1
        with:
          architecture: ${{ env.IS_32_BIT == 'true' && 'x86' || 'x64' }}

      - name: "🛠️ Windows Setup RTools (32|64-bit)"
        if: ${{ runner.os == 'Windows' }}
        run: |
          if ($env:IS_32_BIT -eq "true") {
            ## mingw-w32
            choco install -y --no-progress --skip-automatic rtools
            echo "c:\rtools40\i386\bin;" >> $env:GITHUB_PATH
            echo "PKG_CONFIG_PATH=c:/rtools40/i386/lib/pkgconfig" >> $env:GITHUB_ENV
          } else {
            ## mingw-w64
            choco install -y --no-progress --skip-automatic rtools
            echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
            echo "PKG_CONFIG_PATH=c:/rtools40/ucrt64/lib/pkgconfig" >> $env:GITHUB_ENV
          }
          ## Verify Tools
          echo cl /? >> $GITHUB_OUTPUT
          echo gcc --version >> $GITHUB_OUTPUT

      - name: "🛠️ Windows Setup Environment Variables (set PKG_CONFIG_PATH)"
        if: ${{ runner.os == 'Windows' }}
        run: |
          ## Install "pkg-config" via Chocolatey
          choco install --no-progress --skip-automatic --stoponfirstfailure --checksum 6004DF17818F5A6DBF19CB335CC92702 pkgconfiglite
          ## Verify pkg-config installation and its version
          pkg-config --version

          ## Set up the  $env:CIBW environment variable, in PowerShell (Windows)
          ## pkgconfig needs a complete path, and not just "./openblas" since the
          $CIBW = "${{ github.workspace }}/.openblas"

          ## Handle backslash in paths (convert to forward slash)
          ## build is run in a tmp dir (?)
          ## It seems somewhere in the env passing, `\` is not
          ## passed through, so convert it to '/'
          $CIBW = $CIBW.Replace("\", "/")

          ## Export PKG_CONFIG_PATH the environment variable for GitHub Actions "$env:GITHUB_ENV"
          echo "PKG_CONFIG_PATH=$CIBW" >> $env:GITHUB_ENV
          echo CIBW_ENVIRONMENT="PKG_CONFIG_PATH=$CIBW" >> $env:GITHUB_ENV
          echo CIBW_ENVIRONMENT_WINDOWS="PKG_CONFIG_PATH=$CIBW" >> $env:GITHUB_ENV

          ## Debug the PKG_CONFIG_PATH and check if it's set correctly
          echo "$PKG_CONFIG_PATH" >> $GITHUB_OUTPUT
          echo "$CIBW_ENVIRONMENT" >> $GITHUB_OUTPUT

      # --- matrix.buildplat ---

      - name: "🛠️ macOS Setup"
        if: startsWith( matrix.buildplat[0], 'macos-' )
        run: |
          ## Needed due to https://github.com/actions/runner-images/issues/3371
          ## Supported versions: https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
          echo "FC=gfortran-13" >> "$GITHUB_ENV"
          echo "F77=gfortran-13" >> "$GITHUB_ENV"
          echo "F90=gfortran-13" >> "$GITHUB_ENV"

          if [[ ${{ matrix.buildplat[3] }} == 'accelerate' ]]; then
            echo CIBW_CONFIG_SETTINGS=\"setup-args=-Dblas=accelerate\" >> "$GITHUB_ENV"
            ## Always use preinstalled gfortran for Accelerate builds
            ln -s $(which gfortran-13) gfortran
            export PATH=$PWD:$PATH
            echo "PATH=$PATH" >> "$GITHUB_ENV"
            LIB_PATH=$(dirname $(gfortran --print-file-name libgfortran.dylib))
          fi
          if [[ ${{ matrix.buildplat[4] }} == '10.13' ]]; then
            ## 20241017 macos-13 images span Xcode 14.1-->15.2
            # XCODE_VER='14.1'
            ## Check for Xcode 14 and set the highest available version dynamically
            XCODE_VER=$(ls /Applications | grep -E 'Xcode_14\.' | sort -V | tail -n 1)
            ## Extract the full version number (e.g., 14.3.1 from Xcode_14.3.1.app)
            XCODE_VER=$(echo "$XCODE_VER" | sed -E 's/Xcode_([0-9]+\.[0-9]+\.[0-9]+)\.app/\1/')
          else
            # XCODE_VER='15.2'
            ## Check for Xcode 15 and set the highest available version dynamically
            XCODE_VER=$(ls /Applications | grep -E 'Xcode_15\.' | sort -V | tail -n 1)
            ## Extract the full version number (e.g., 15.4.0 from Xcode_15.4.0.app)
            XCODE_VER=$(echo "$XCODE_VER" | sed -E 's/Xcode_([0-9]+\.[0-9]+\.[0-9]+)\.app/\1/')
          fi
          echo "Selected Xcode version: $XCODE_VER"

          ## Use the selected Xcode version in the xcode-select command
          CIBW="sudo xcode-select -s /Applications/Xcode_${XCODE_VER}.app"
          echo "CIBW_BEFORE_ALL=$CIBW" >> $GITHUB_ENV

          ## setting SDKROOT necessary when using the gfortran compiler
          ## installed in cibw_before_build_macos.sh
          sudo xcode-select -s /Applications/Xcode_${XCODE_VER}.app
          CIBW="MACOSX_DEPLOYMENT_TARGET=${{ matrix.buildplat[4] }}\
            SDKROOT=$(xcrun --sdk macosx --show-sdk-path)\
            PKG_CONFIG_PATH=${{ github.workspace }}/.openblas"
          echo "CIBW_ENVIRONMENT=$CIBW" >> "$GITHUB_ENV"

          echo "REPAIR_PATH=$LIB_PATH" >> "$GITHUB_ENV"

          PREFIX=DYLD_LIBRARY_PATH="\$(dirname \$(gfortran --print-file-name libgfortran.dylib))"
          ## remove libgfortran from location used for linking (if any), to
          ## check wheel has bundled things correctly and all tests pass without
          ## needing installed gfortran
          POSTFIX=" sudo rm -rf /opt/gfortran-darwin-x86_64-native &&\
                    sudo rm -rf /usr/local/gfortran/lib"
          CIBW="$PREFIX delocate-listdeps -d {wheel} && echo "-----------" &&\
            $PREFIX delocate-wheel -v $EXCLUDE --require-archs \
            {delocate_archs} -w {dest_dir} {wheel} && echo "-----------" &&\
            delocate-listdeps -d {dest_dir}/*.whl && echo "-----------" &&\
            $POSTFIX"

          ## Rename x86 Accelerate wheel to test on macOS 13 runner
          if [[ ${{ matrix.buildplat[0] }} == 'macos-13' && ${{ matrix.buildplat[4] }} == '14.0' ]]; then
            CIBW+=" && mv {dest_dir}/\$(basename {wheel}) \
              {dest_dir}/\$(echo \$(basename {wheel}) | sed 's/14_0/13_0/')"
          fi

          ## macos-arm64-openblas wheels that target macos-12 need a
          ## MACOS_DEPLOYMENT_TARGET of 12.3 otherwise delocate complains.
          ## Unclear of cause, possibly build tool related.
          ## This results in wheels that have 12_3 in their name. Since Python
          ## has no concept of minor OS versions in packaging land rename the
          ## wheel back to 12.
          if [[ ${{ matrix.buildplat[0] }} == 'macos-14' && ${{ matrix.buildplat[4] }} == '12.3' ]]; then
            CIBW+=" && echo \$(ls {dest_dir}) && \
            mv {dest_dir}/*.whl \$(find {dest_dir} -type f -name '*.whl' | sed 's/12_3/12_0/')"
          fi
          echo "CIBW_REPAIR_WHEEL_COMMAND_MACOS=$CIBW" >> "$GITHUB_ENV"

      # --- matrix.python ---

      # - name: "🛠️ Inject environment variable for python dev version"
      #   if: ${{ matrix.python[1] == '3.14-dev'
      #   shell: bash
      #   run: |
      #     # For dev versions of python need to use wheels from scientific-python-nightly-wheels
      #     # When the python version is released please comment out this section, but do not remove
      #     # (there will soon be another dev version to target).
      #     DEPS0="pip install --pre -i https://pypi.anaconda.org/scientific-python-nightly-wheels/simple numpy"
      #     DEPS1="pip install ninja meson-python pybind11 pythran cython"

      #     CIBW="$DEPS0;$DEPS1;bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"
      #     echo "CIBW_BEFORE_BUILD_LINUX=$CIBW" >> "$GITHUB_ENV"

      #     CIBW="$DEPS0 && $DEPS1 && bash {project}/tools/wheels/cibw_before_build_win.sh {project}"
      #     echo "CIBW_BEFORE_BUILD_WINDOWS=$CIBW" >> "$GITHUB_ENV"

      #     CIBW="$DEPS0;$DEPS1;bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"
      #     echo "CIBW_BEFORE_BUILD_MACOS=$CIBW" >> "$GITHUB_ENV"

      #     echo "CIBW_BEFORE_TEST=$DEPS0" >> "$GITHUB_ENV"

      - name: "📦 Build Wheels Packages"
        # uses: pypa/cibuildwheel@faf86a6ed7efa889faf6996aa23820831055001a  # v2.23.3
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7 # v3.0.0
        env:  # Step level environment NAME: '', $NAME, ${{ env.NAME }}
          ## Specify target platform
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}*
          CIBW_ARCHS: ${{ matrix.buildplat[2] }}
          ## Changed work version # v3.0.0 also defined TOML
          CIBW_ENABLE: cpython-freethreading cpython-prerelease
          ## Enable support for free-threaded builds (specific to some platforms)
          ## Set CIBW_PRERELEASE_PYTHONS to True to build for pre-release versions of Python
          # CIBW_FREE_THREADED_SUPPORT: True
          # CIBW_PRERELEASE_PYTHONS: True

      # --- matrix.buildplat ---

      - name: "🛠️ macOS Wheels Packages Rename"
        if: startsWith( matrix.buildplat[0], 'macos-' )
        run: |
          ## macos-x86_64-accelerate wheels targeting macos-14 were renamed to 13
          ## so they could be tested. Shift wheel name back to targeting 14.
          if [[ ${{ matrix.buildplat[0] }} == 'macos-13' && ${{ matrix.buildplat[4] }} == '14.0' ]]; then
            mv ./wheelhouse/*.whl $(find ./wheelhouse -type f -name '*.whl' | sed 's/13_0/14_0/')
          fi

      # --- RUNNER_OS ---

      - name: "🛠️ Ensure wheel files exist and list them"
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "🔍 Looking for wheel files in ./wheelhouse..."
          if compgen -G "./wheelhouse/*.whl" > /dev/null; then
            echo "✅ Found the following wheels:"
            ls -lh ./wheelhouse/*.whl
          else
            echo "❌ No wheel files found in ./wheelhouse/"
            ls -lh ./
            exit 1  # Optional: fail the step if no wheels are found
          fi

      - name: "📦 Upload Wheelhouse Wheels Artifact(s) (.whl Packages)"
        id: artifact-upload-step
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: >-
            Wheel-${{ matrix.python[0] }}-${{ join(matrix.buildplat, '-') }}
          path: ./wheelhouse/*.whl
          # if-no-files-found: error
          # include-hidden-files: true

      - name: Conda environment creation and activation anaconda-client
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          ## for installation of anaconda-client, required for upload to
          ## anaconda.org
          ## Note that this step is *after* specific pythons have been used to
          ## build and test the wheel
          ## for installation of anaconda-client, for upload to anaconda.org
          ## environment will be activated after creation, and in future bash steps
          ## environment-file: devtools/conda-envs/build_env.yaml    # Path to the build conda environment
          # auto-activate-base: false
          conda-remove-defaults: "true"
          auto-update-conda: true
          show-channel-urls: true
          miniforge-version: latest
          python-version: "3.11"

      - name: "📥 Upload Scikit-plots Wheels (.whl) Package(s) to Anaconda.org PyPI index"
        if: success()
        ## see https://github.com/marketplace/actions/setup-miniconda for why
        ## `-el {0}` is required.
        shell: bash -el {0}
        # with: # Set the secret as an input
        #   super_secret: ${{ secrets.SuperSecret }}
        env: # Or as an environment variable
          ## ${{ secrets.<SECRET_NAME> }} retrieves the value of a secret stored securely
          ## in the Repository's Secrets or  Environments Secrets settings on GitHub.
          SKPLT_STAGING_UPLOAD_TOKEN: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN }}  # Use as TOKEN
          ## commented out so the sdist doesn't upload to nightly
          SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY }}  # Use as TOKEN nightly
        run: |
          ## https://github.com/marketplace/actions/build-and-upload-conda-packages
          ## https://docs.anaconda.com/anacondaorg/user-guide/packages/standard-python-packages/
          conda install -qy anaconda-client
          source tools/wheels/upload_wheels.sh

          set_upload_vars  # Required TOKEN, USERNAME
          # For cron jobs (restricted to main branch) or "Run workflow" trigger
          # an upload to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging-nightly/scikit-plots
          #
          # Pushes to a maintenance branch that contain '[wheel build]' will
          # cause wheels to be built and uploaded to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging/scikit-plots
          #
          # The tokens were originally generated at anaconda.org
          upload_wheels  # Required WHEEL_FILE_PATH

  build_sdist:
    name: "Build Source (sdist) Package"
    runs-on: ubuntu-latest
    needs: check_build_trigger

    env:  # Job level environment NAME: '', $NAME, ${{ env.NAME }}
      # IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}  # Build platform is 32-bit (e.g., 'x86', 'win32')
      # upload to staging if it's a push to a maintenance branch
      # and the last GIT COMMIT MESSAGE contains '[wheel build]'
      # Check current EVENT is a "push" event
      # Triggered for specific BRANCHES (e.g., main, maintenance/**)
      # Triggered for TAGS starting with 'v'
      IS_PUSH: >-
        ${{
          contains(needs.check_build_trigger.outputs.COMMIT_MESSAGE, 'true') &&
          github.event_name == 'push' &&
          (startsWith(github.ref, 'refs/heads/main') ||
           startsWith(github.ref, 'refs/tags/v') ||
           contains( github.ref,  'maintenance')
          )
        }}
      # Checks if the EVENT is a "schedule" or manual "workflow_dispatch"
      IS_SCHEDULE_DISPATCH: >-
        ${{
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'schedule'
        }}

    if: >-
      contains(needs.check_build_trigger.outputs.COMMIT_MESSAGE, 'true') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && ( ! endsWith(github.ref, 'dev0') )) ||
      (github.event_name == 'pull_request' &&
       (contains(github.event.pull_request.labels.*.name, '36 - Build') ||
        contains(github.event.pull_request.labels.*.name, '14 - Release')
       )
      )

    steps:
      - name: "⬇️ Checkout (cloned) repository with full history"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # Prevents accidental credential exposure
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          fetch-tags: true

      - name: "🛠️ Install system dependencies, Not needed cause os independent"
        run: |
          sudo apt-get update --fix-missing -y
          sudo apt-get install --fix-missing -y --no-install-recommends \
            ninja-build \
            ccache \
            cm-super \
            graphviz \
            ffmpeg \
            inkscape \
            make \
            gfortran \
            libopenblas-dev \
            liblapack-dev \
            libgmp-dev \
            libmpfr-dev

      # Used to push the built wheels
      - name: "🐍 Python Setup"  # Used to push the built wheels
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # Build sdist on lowest supported Python
          python-version: "3.10"  # due to array api compat

      # Source distribution (raw source code archive)
      - name: "📦 Build Source Distribution (.tar.gz, sdist) of a Python package"
        run: |
          pip install -r requirements/build.txt

          # meson setup builddir && meson dist -C builddir
          # meson setup builddir && meson dist -C builddir --allow-dirty --no-tests --formats gztar
          python -m build --sdist -Csetup-args=-Dallow-noblas=true

      - name: Test the sdist
        run: |
          ## TODO: Don't run test suite, and instead build wheels from sdist
          ## Depends on pypa/cibuildwheel#1020
          pip install -r requirements/test.txt

          python -m pip cache purge
          python -m pip install -v dist/*.gz -Csetup-args=-Dallow-noblas=true

          ## Can't import "scikitplot" within "scikitplot" src directory
          cd dist
          ## python -c "import scikitplot, sys; print(scikitplot.__version__); sys.exit(numpy.test() is False)"
          python -c "import scikitplot, sys; print(scikitplot.__version__);"

      - name: "🧪 PyPI Check README rendering"
        run: |
          python -m pip install twine
          twine check dist/*.gz

      - name: Upload Wheelhouse Wheels Packages
        id: artifact-upload-step
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sdist
          path: ./dist/*.gz
          # include-hidden-files: true

      - name: Conda environment creation and activation anaconda-client
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          # for installation of anaconda-client, required for upload to
          # anaconda.org
          # Note that this step is *after* specific pythons have been used to
          # build and test the wheel
          # for installation of anaconda-client, for upload to anaconda.org
          # environment will be activated after creation, and in future bash steps
          # environment-file: devtools/conda-envs/build_env.yaml    # Path to the build conda environment
          # auto-activate-base: false
          conda-remove-defaults: "true"
          auto-update-conda: true
          show-channel-urls: true
          miniforge-version: latest
          python-version: "3.11"

      - name: "📥 Upload Scikit-plots Source (sdist) Package to Anaconda.org PyPI index"
        if: success()
        # see https://github.com/marketplace/actions/setup-miniconda for why
        # `-el {0}` is required.
        shell: bash -el {0}
        env:
          # ${{ secrets.<SECRET_NAME> }} retrieves the value of a secret stored securely
          # in the Repository's Secrets or  Environments Secrets settings on GitHub.
          SKPLT_STAGING_UPLOAD_TOKEN: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN }}  # Use as TOKEN
          # commented out so the sdist doesn't upload to nightly
          SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY }}  # Use as TOKEN nightly
        run: |
          ## https://github.com/marketplace/actions/build-and-upload-conda-packages
          ## https://docs.anaconda.com/anacondaorg/user-guide/packages/standard-python-packages/
          conda install -y anaconda-client
          source tools/wheels/upload_wheels.sh

          set_upload_vars  # Required TOKEN, USERNAME
          # For cron jobs (restricted to main branch) or "Run workflow" trigger
          # an upload to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging-nightly/scikit-plots
          #
          # Pushes to a maintenance branch that contain '[wheel build]' will
          # cause wheels to be built and uploaded to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging/scikit-plots
          #
          # The tokens were originally generated at anaconda.org
          upload_wheels  # Required WHEEL_FILE_PATH

  build_wasm:
    name: Build WASM (WebAssembly/Emscripten/Pyodide) Package for Pyodide
    # runs-on: ubuntu-latest  # Use the latest Ubuntu virtual environment
    runs-on: ubuntu-22.04  # python3.12
    needs: check_build_trigger

    env:  # Job level environment NAME: '', $NAME, ${{ env.NAME }}
      # IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}  # Build platform is 32-bit (e.g., 'x86', 'win32')
      # upload to staging if it's a push to a maintenance branch
      # and the last GIT COMMIT MESSAGE contains '[wheel build]'
      # Check current EVENT is a "push" event
      # Triggered for specific BRANCHES (e.g., main, maintenance/**)
      # Triggered for TAGS starting with 'v'
      IS_PUSH: >-
        ${{
          contains(needs.check_build_trigger.outputs.COMMIT_MESSAGE, 'true') &&
          github.event_name == 'push' &&
          (startsWith(github.ref, 'refs/heads/main') ||
           startsWith(github.ref, 'refs/tags/v') ||
           contains( github.ref,  'maintenance')
          )
        }}
      # Checks if the EVENT is a "schedule" or manual "workflow_dispatch"
      IS_SCHEDULE_DISPATCH: >-
        ${{
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'schedule'
        }}

    if: >-
      contains(needs.check_build_trigger.outputs.COMMIT_MESSAGE, 'true') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'push' &&
       startsWith(github.ref, 'refs/tags/v') &&
       ( ! endsWith(github.ref, 'dev0') )
      ) ||
      (github.event_name == 'pull_request' &&
       (contains(github.event.pull_request.labels.*.name, '36 - Build') ||
        contains(github.event.pull_request.labels.*.name, '14 - Release')
       )
      )

    steps:
      - name: "⬇️ Checkout (cloned) repository with full history"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # Prevents accidental credential exposure
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          fetch-tags: true

      - name: Build Wheels Packages
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7 # v3.0.0
        continue-on-error: true
        env:  # Step level environment NAME: '', $NAME, ${{ env.NAME }}
          CIBW_PLATFORM: pyodide

      - name: Upload Wheelhouse Wheels Artifact(s) (.whl Packages)
        id: artifact-upload-step
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        continue-on-error: true
        with:
          name: cp312-pyodide_wasm32
          path: ./wheelhouse/*.whl
          # if-no-files-found: error
          # include-hidden-files: true

      - name: Conda environment creation and activation anaconda-client
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        continue-on-error: true
        with:
          ## for installation of anaconda-client, required for upload to
          ## anaconda.org
          ## Note that this step is *after* specific pythons have been used to
          ## build and test the wheel
          ## for installation of anaconda-client, for upload to anaconda.org
          ## environment will be activated after creation, and in future bash steps
          ## environment-file: devtools/conda-envs/build_env.yaml    # Path to the build conda environment
          # auto-activate-base: false
          conda-remove-defaults: "true"
          auto-update-conda: true
          show-channel-urls: true
          miniforge-version: latest
          python-version: "3.11"

      - name: "📥 Upload Scikit-plots WASM Wheel (.whl) Package to Anaconda.org PyPI index"
        if: success()
        ## see https://github.com/marketplace/actions/setup-miniconda for why
        ## `-el {0}` is required.
        shell: bash -el {0}
        # with: # Set the secret as an input
        #   super_secret: ${{ secrets.SuperSecret }}
        env: # Or as an environment variable
          ## ${{ secrets.<SECRET_NAME> }} retrieves the value of a secret stored securely
          ## in the Repository's Secrets or  Environments Secrets settings on GitHub.
          SKPLT_STAGING_UPLOAD_TOKEN: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN }}  # Use as TOKEN
          ## commented out so the sdist doesn't upload to nightly
          SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY }}  # Use as TOKEN
        run: |
          ## https://github.com/marketplace/actions/build-and-upload-conda-packages
          ## https://docs.anaconda.com/anacondaorg/user-guide/packages/standard-python-packages/
          conda install -qy anaconda-client
          source tools/wheels/upload_wheels.sh

          set_upload_vars  # Required TOKEN, USERNAME
          # For cron jobs (restricted to main branch) or "Run workflow" trigger
          # an upload to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging-nightly/scikit-plots
          #
          # Pushes to a maintenance branch that contain '[wheel build]' will
          # cause wheels to be built and uploaded to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging/scikit-plots
          #
          # The tokens were originally generated at anaconda.org
          upload_wheels  # Required WHEEL_FILE_PATH
