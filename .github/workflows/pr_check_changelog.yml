## https://github.com/scientific-python/action-towncrier-changelog
---
name: "PRs 📄 Changelog File"  # 🗸 🗹 ✔️ ☑️ ✅ 📝 📄 🗒️ 📃 🧾

## This check makes sure that the changelog is properly updated
## when a PR introduces a change in a test file.
## To bypass this check, label the PR with "No Changelog Needed".
on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

## simultaneity
## This ensures that only one deployment to "production" can happen at a time.
## If a new commit is pushed before the current job finishes, the in-progress job is canceled.
concurrency:
  ## Ensures that only one instance of this workflow runs per branch or PR at a time.
  ## The 'group' key defines a unique concurrency group:
  ## - github.workflow: Name of the workflow file.
  ## - github.head_ref: (Only on pull_request) The name of the branch from which the PR was created (source branch). Example: "feature/add-login"
  ## - github.run_id: (Always) A unique numeric ID for each run of a workflow. Useful as a fallback for uniqueness. Example: 6432789156
  ## - github.ref: (Always) The full ref path of the branch or tag that triggered the workflow. Examples: For a push to a branch: "refs/heads/main" For a PR: "refs/pull/42/merge" For a tag: "refs/tags/v1.0.0"
  ## - github.ref_name: (Always) Just the final part of the ref path (branch or tag name, does not exist for PRs). Examples: For a push to a branch: "main" For a tag: "v1.0.0"
  ## This ensures: PRs use head_ref, Pushes/Tags use ref or ref_name, Fallback to run_id in edge cases
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  ## If you push multiple times quickly, older runs would continue even though newer ones have started.
  ## Canceling previous runs reduces resource usage and speeds up feedback.
  ## If a new run is triggered for the same group, cancel the in-progress one.
  cancel-in-progress: true

## Top-level permissions (outside jobs)
## Job-level permissions (inside a specific job)
## Restrict the permissions granted to the use of secrets.GITHUB_TOKEN in this
## github actions workflow:
## https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions:
  ## only required for workflows in private repositories
  contents: read  # for actions/checkout to fetch code
  pull-requests: read
  # pull-requests: write  # Needed to apply/remove labels

## Global environment variables (available to all jobs and steps)
## Job-level environment variables (override global, scoped to this job)
## Step-level environment variables (override job + global, scoped to this step)

jobs:
  changelog_checker:
    name: A reviewer will let you know if it is required or can be bypassed for (towncrier change log entry)
    runs-on: ubuntu-latest

    # To enable this workflow on a fork, comment out:
    if: github.repository == 'scikit-plots/scikit-plots'

    steps:
      ## Can write comments / labels on PR from fork?
      ## automatically adds predefined labels to all incoming PRs
      # - name: Auto-label new PR (only on first open)
      #   uses: actions-ecosystem/action-add-labels@18f1af5e3544586314bbe15c0273249c770b2daf # v1.1.3
      #   if: >-
      #     github.event.action == 'opened'
      #     && !contains(join(github.event.pull_request.labels.*.name, ','), 'no-changelog-entry-needed')
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     labels: |
      #       no-changelog-entry-needed

      - name: Check if towncrier change log entry is correct
        uses: scientific-python/action-towncrier-changelog@1d7332022f76e36fe8ce2d716b851f3f98063c62  # v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_USERNAME: gilesbot  # 'astropy-bot'
