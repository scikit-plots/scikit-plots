# Workflow Name: Publish Python distribution to PyPI and TestPyPI
# Documentation: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
name: Publish Python üêç distribution üì¶ to PyPI and TestPyPI

# Trigger the workflow on any push
on:
  push:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  # Job 1: Build the distribution
  build:
    name: Build Python Distribution üì¶
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"  # Use the latest Python 3.x version

      # Step 3: Install the required package for building
      - name: Install pypa/build
        run: python3 -m pip install build --user

      # Step 4: Build the binary wheel and source tarball
      - name: Build a binary wheel and a source tarball
        run: python3 -m build

      # Step 5: Store the distribution packages as artifacts
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Job 2: Publish to PyPI
  publish-to-pypi:
    name: Publish to PyPI
    # Only trigger this job on tag pushes
    if: startsWith(github.ref, 'refs/tags/')
    needs: 
      - build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      # url: https://pypi.org/p/<package-name>  # Replace <package-name> with your PyPI project name
      url: https://pypi.org/p/scikit-plots  # Set to your PyPI project name

    permissions:
      id-token: write  # Required for trusted publishing to PyPI

    steps:
      # Step 1: Download the built distributions
      - name: Download the distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Step 2: Publish the distribution to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Job 3: Create a GitHub Release and sign with Sigstore
  github-release:
    name: Sign and Upload to GitHub Release
    needs: 
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for creating GitHub Releases
      id-token: write  # Required for Sigstore signing

    steps:
      # Step 1: Download the built distributions
      - name: Download the distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Step 2: Sign the distributions with Sigstore
      - name: Sign the distributions with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      # Step 3: Create a GitHub Release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""

      # Step 4: Upload artifact signatures to the GitHub Release
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  # Job 4: Publish to TestPyPI
  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: 
      - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/<package-name>  # Replace <package-name> with your TestPyPI project name

    permissions:
      id-token: write  # Required for trusted publishing to TestPyPI

    steps:
      # Step 1: Download the built distributions
      - name: Download the distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Step 2: Publish the distribution to TestPyPI
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/