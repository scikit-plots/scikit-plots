## Documentation: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
## This workflow automates the process of publishing your Python package to TestPyPI or PyPI.

name: Upload to TestPyPI|PyPI

## Trigger the workflow manually via GitHub Actions' "workflow_dispatch".
on:
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      version:  # Specify the version of the package to upload
        description: 'Version to upload to PyPI (e.g., 1.0.0)'
        default: '0.4.0.post0'
        required: true
      conda_source:  # Specify whether to conda pkg source
        description: 'conda pkg source'
        default: 'scikit-plots-wheels-staging-nightly'  # Default
        required: true
      pypi_repo:  # Specify whether to publish to TestPyPI or PyPI
        description: 'Repository to upload to (testpypi or pypi)'
        default: 'testpypi'  # Default to TestPyPI for safety
        required: true

permissions: # Grants read-only permission to repository contents
  contents: read # to fetch code (actions/checkout)
  # IMPORTANT: This permission is mandatory for secure publishing
  id-token: write  # Required for trusted publishing

jobs:
  publish_on_pypi:
    name: Publish Package to TestPyPI|PyPI
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual environment

    ## Restrict this job to the 'publish_pypi' environment
    ## If Activated, Accessing Environment Secret for 'publish_pypi'
    # environment:
    #   publish_pypi  # Specify the environment for environment secrets
    #   url: https://pypi.org/p/<your-pypi-project-name>
    env:  # Step level enviroment NAME: '', $NAME, ${{ env.NAME }}
      SKPLT_VERSION: ${{ github.event.inputs.version }}
      CONDA_SOURCE: ${{ github.event.inputs.conda_source }}

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Step 2: Set up the Python environment
      - name: Python Setup
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.x'  # Specify the Python version

      # Step 3: Install dependencies for building and publishing
      - name: Conda environment creation and activation anaconda-client
        uses: conda-incubator/setup-miniconda@d2e6a045a86077fb6cad6f5adf368e9076ddaa8d # v3.1.0
        with:
          # for installation of anaconda-client, required for upload to
          # anaconda.org
          # Note that this step is *after* specific pythons have been used to
          # build and test the wheel
          # for installation of anaconda-client, for upload to anaconda.org
          # environment will be activated after creation, and in future bash steps
          # environment-file: devtools/conda-envs/build_env.yaml    # Path to the build conda environment
          # auto-activate-base: false
          auto-update-conda: true
          show-channel-urls: true
          miniforge-version: latest
          python-version: "3.10"

      - name: Conda environment creation and activation anaconda-client
        if: success()
        # see https://github.com/marketplace/actions/setup-miniconda for why
        # `-el {0}` is required.
        shell: bash -el {0}
        run: |
          # https://github.com/marketplace/actions/build-and-upload-conda-packages
          # # https://docs.anaconda.com/anacondaorg/user-guide/packages/standard-python-packages/
          conda install -y anaconda-client
          # conda install conda-forge::wheelhouse_uploader
          # pip install -U pip pyyaml twine  # wheelhouse_uploader

      # Step 4: Download wheels and sdist from Anaconda
      - name: Download wheels and sdist from Anaconda
        run: |
          echo "Downloading $SKPLT_VERSION wheels and sdist from Anaconda repository"
          anaconda-client download \
            scikit-plots=$SKPLT_VERSION \
            --channel https://pypi.anaconda.org/$CONDA_SOURCE/simple \
            --output-dir dist/
          ls -al dist/
          # Filter or delete platform-specific files as needed
          # find dist/ -type f ! -name "*.whl" -delete  # Example to delete non-wheel files
          
      # Step 5a: Publish the package to TestPyPI (if selected)
      - name: Publish package distributions to TestPyPI
        if: ${{ github.event.inputs.pypi_repo == 'testpypi' }}
        uses: pypa/gh-action-pypi-publish@15c56dba361d8335944d31a2ecd17d700fc7bcbc # v1.12.2
        with:
          user: __token__
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}  # Accessing Repository Secret TestPyPI API token
          repository-url: https://test.pypi.org/legacy/
          print-hash: true

      # Step 5b: Publish the package to PyPI (if selected)
      - name: Publish package distributions to  PyPI
        if: ${{ github.event.inputs.pypi_repo == 'pypi' }}  # Run only if 'pypi' is chosen
        uses: pypa/gh-action-pypi-publish@15c56dba361d8335944d31a2ecd17d700fc7bcbc # v1.12.2
        with:
          print-hash: true

      # # Step 3: Install dependencies for building and publishing
      # - name: Install build dependencies
      #   run: |
      #     # Install the necessary tools for building and publishing
      #     # pip install --upgrade setuptools wheel build twine
      #     pip install -U wheelhouse_uploader pyyaml
      # # Step 4a:Build source and wheel distributions
      # - name: Build source and wheel distributions
      #   run: |
      #     # Build both source distribution (sdist) and built distribution (wheel)
      #     python -m build
      #     twine check --strict dist/*
      #     # twine upload dist/*
      #     env:
      #       TWINE_USERNAME: __token__
      #       TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      # # Step 4b: Downloading the package
      # - name: Downloading wheels and sdist from staging
      #   run: |
      #     echo "Download $SKPLT_VERSION wheels and sdist"
      #     python -m wheelhouse_uploader fetch \
      #       --version $SKPLT_VERSION \
      #       --local-folder dist/ \
      #       scikit-plots \
      #       https://pypi.anaconda.org/scikit-plots-wheels-staging/simple/scikit-plots/
      # - name: Check dist has the correct number of artifacts
      #   run: |
      #     python build_tools/github/check_wheels.py publish-to-test-pypi.yml