# Concept	    Analogy                             	Role (Related To)
# WASM	      Machine code                          The target binary format (WebAssembly VM, Browser)
# WebAssembly	The CPU architecture                  Platform-independent bytecode spec (WASM, Browsers) = technology/platform.
# Emscripten	The compiler (like GCC)               Compiles C/C++ → WebAssembly (Uses LLVM)
# Pyodide	    Python interpreter running on WASM    Python compiled via Emscripten to WASM (Uses CPython + Emscripten) = an application/runtime built on WebAssembly.
# +-------------------------------+
# |       Your Browser           |
# |                               |
# |  +------------------------+   |
# |  |  WebAssembly Runtime    |  <-- part of browser
# |  |                        |   |
# |  |  Runs .wasm binaries   |   |
# |  +----------+-------------+   |
# |             |                 |
# |     +-------v---------+       |
# |     |     Pyodide     |       | <-- .wasm file: CPython + Emscripten + numpy + ...
# |     +-----------------+       |     Python compiled via Emscripten to WASM.
# +-------------------------------+
---
name: "CI 📦 Wheels Emscripten/Pyodide"  # WebAssembly frontend (via pyodide)

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      push_wheels:
        # Can be 'true' or 'false'. Default is 'false'.
        # Warning: this will overwrite existing wheels.
        description: >
          Push wheels to Anaconda.org if the build succeeds
        required: false
        default: 'false'
  # pull_request:
  #   branches:
  #     - main
  #     ## Release branches
  #     - maintenance/**
  # Note: this workflow gets triggered on the same schedule as the
  # wheels.yml workflow to upload WASM wheels to Anaconda.org.
  # schedule:
  #   #        ┌───────────── minute (0 - 59)
  #   #        │  ┌───────────── hour (0 - 23)
  #   #        │  │ ┌───────────── day of the month (1 - 31)
  #   #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #   #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #   #        │  │ │ │ │
  #   - cron: "42 2 * * SUN,WED"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  build-wasm-emscripten:
    name: Build WASM (WebAssembly/Emscripten/Pyodide)
    # runs-on: ubuntu-latest  # Use the latest Ubuntu virtual environment
    runs-on: ubuntu-22.04  # python3.12

    permissions:
      contents: read  # to fetch code (actions/checkout)

    # To enable this workflow on a fork, comment out:
    if: github.repository == 'scikit-plots/scikit-plots'

    steps:
      ## 📥 Checkout the Git repository into the runner
      - name: "⬇️ Checkout (cloned) repository with full history"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # Prevents accidental credential exposure
          # submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          lfs: true
          ## Gets the correct commit message for pull request
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Build Wheels Packages
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7  # v3.0.0
        env:  # Step level environment NAME: '', $NAME, ${{ env.NAME }}
          CIBW_PLATFORM: pyodide

      - name: Upload Wheelhouse Wheels Artifact(s) (.whl Packages)
        id: artifact-upload-step
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Wheel-cp312-pyodide_wasm32
          path: ./wheelhouse/*.whl
          # if-no-files-found: error
          # include-hidden-files: true

      - name: Conda environment creation and activation anaconda-client
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          ## for installation of anaconda-client, required for upload to
          ## anaconda.org
          ## Note that this step is *after* specific pythons have been used to
          ## build and test the wheel
          ## for installation of anaconda-client, for upload to anaconda.org
          ## environment will be activated after creation, and in future bash steps
          ## environment-file: devtools/conda-envs/build_env.yaml    # Path to the build conda environment
          # auto-activate-base: false
          conda-remove-defaults: "true"
          auto-update-conda: true
          show-channel-urls: true
          miniforge-version: latest
          python-version: "3.11"

      - name: Upload Conda Wheels (.whl) Packages
        if: success()
        ## see https://github.com/marketplace/actions/setup-miniconda for why
        ## `-el {0}` is required.
        shell: bash -el {0}
        # with: # Set the secret as an input
        #   super_secret: ${{ secrets.SuperSecret }}
        env: # Or as an environment variable
          ## ${{ secrets.<SECRET_NAME> }} retrieves the value of a secret stored securely
          ## in the Repository's Secrets or  Environments Secrets settings on GitHub.
          SKPLT_STAGING_UPLOAD_TOKEN: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN }}  # Use as TOKEN
          ## commented out so the sdist doesn't upload to nightly
          SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY: ${{ secrets.SKPLT_STAGING_UPLOAD_TOKEN_NIGHTLY }}  # Use as TOKEN
        run: |
          ## https://github.com/marketplace/actions/build-and-upload-conda-packages
          ## https://docs.anaconda.com/anacondaorg/user-guide/packages/standard-python-packages/
          conda install -qy anaconda-client
          source tools/wheels/upload_wheels.sh

          set_upload_vars  # Required TOKEN, USERNAME
          # For cron jobs (restricted to main branch) or "Run workflow" trigger
          # an upload to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging-nightly/scikit-plots
          #
          # Pushes to a maintenance branch that contain '[wheel build]' will
          # cause wheels to be built and uploaded to:
          #
          # https://anaconda.org/scikit-plots-wheels-staging/scikit-plots
          #
          # The tokens were originally generated at anaconda.org
          upload_wheels  # Required WHEEL_FILE_PATH

  # build-wasm-emscripten:
  #   permissions:
  #     contents: read  # to fetch code (actions/checkout)
  #   name: Build NumPy distribution for Pyodide
  #   runs-on: ubuntu-22.04
  #   # To enable this workflow on a fork, comment out:
  #   if: github.repository == 'numpy/numpy'
  #   steps:
  #     - name: Checkout NumPy
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
  #       with:
  #         submodules: recursive
  #         fetch-tags: true
  #         persist-credentials: false

  #     - uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7  # v3.0.0
  #       env:
  #         CIBW_PLATFORM: pyodide

  #     - name: Upload wheel artifact(s)
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
  #       with:
  #         name: cp312-pyodide_wasm32
  #         path: ./wheelhouse/*.whl
  #         if-no-files-found: error

  # # Push to https://anaconda.org/scientific-python-nightly-wheels/numpy
  # # WARNING: this job will overwrite any existing WASM wheels.
  # upload-wheels:
  #   name: Upload NumPy WASM wheels to Anaconda.org
  #   runs-on: ubuntu-22.04
  #   permissions: {}
  #   needs: [build-wasm-emscripten]
  #   if: >-
  #     (github.repository == 'numpy/numpy') &&
  #     (github.event_name == 'workflow_dispatch' && github.event.inputs.push_wheels == 'true') ||
  #     (github.event_name == 'schedule')
  #   steps:
  #     - name: Download wheel artifact(s)
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4.3.0
  #       with:
  #         path: wheelhouse/
  #         merge-multiple: true

  #     - name: Push to Anaconda PyPI index
  #       uses: scientific-python/upload-nightly-action@b36e8c0c10dbcfd2e05bf95f17ef8c14fd708dbf  # v0.6.2
  #       with:
  #         artifacts_path: wheelhouse/
  #         anaconda_nightly_upload_token: ${{ secrets.NUMPY_NIGHTLY_UPLOAD_TOKEN }}
