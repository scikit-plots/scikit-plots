name: Build Dependencies(Win-ARM64)
description: "Common setup steps for Win-ARM64 CI"
runs:
  using: "composite"
  steps:
    - name: Install LLVM (ARM64)  # LLVM (clang-cl, flang-new) -> Cross-toolchain & Fortran
      shell: pwsh
      run: | # zizmor: ignore[github-env] safe: adding
        Invoke-WebRequest https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/LLVM-20.1.8-woa64.exe -UseBasicParsing -OutFile LLVM-woa64.exe
        $expectedHash = "7c4ac97eb2ae6b960ca5f9caf3ff6124c8d2a18cc07a7840a4d2ea15537bad8e"
        $fileHash = (Get-FileHash -Path "LLVM-woa64.exe" -Algorithm SHA256).Hash
        if ($fileHash -ne $expectedHash) {
            Write-Error "Checksum verification failed. The downloaded file may be corrupted or tampered with."
            exit 1
        }
        Start-Process -FilePath ".\LLVM-woa64.exe" -ArgumentList "/S" -Wait
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        echo "CC=clang-cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CXX=clang-cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CFLAGS=/MD /arch:arm64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CXXFLAGS=/MD /arch:arm64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "FC=flang-new" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Activate MSVC ARM64 Toolchain (vcvarsall)  # vcpkg + pkgconf -> Provides pkg-config tool for ARM64
      shell: pwsh
      run: | # zizmor: ignore[github-env] safe: adding pkgconf to PATH amd64_arm64
        & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64
        $env:VCPKG_ROOT = "C:\vcpkg"
        Set-Location $env:VCPKG_ROOT
        ./vcpkg install pkgconf:arm64-windows
        $pkgconfPath = "$env:VCPKG_ROOT\installed\arm64-windows\tools\pkgconf"
        $pkgconf = "$env:VCPKG_ROOT\installed\arm64-windows\tools\pkgconf\pkg-config.exe"
        Copy-Item "$pkgconfPath\pkgconf.exe" "$pkgconfPath\pkg-config.exe" -Force
        echo "$pkgconfPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # Meson: Fix current pkg-config executable is coming from Strawberry Perl, not from vcpkg or LLVM
        echo "PKG_CONFIG=$pkgconf" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # - name: "Set environment variables for ARM64 (CC/CXX/CFLAGS)"
    #   shell: bash -el {0}
    #   # shell: sh -l {0}
    #   # shell: cmd /C CALL {0}
    #   # shell: powershell
    #   # shell: pwsh
    #   run: | # zizmor: ignore[github-env] safe: adding
    #     # echo "CC=clang-cl"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    #     # echo "CXX=clang-cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    #     # echo "CFLAGS=/MD /arch:arm64"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    #     # echo "CXXFLAGS=/MD /arch:arm64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    #     # echo "FC=flang-new" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    #     echo "CC=clang-cl" >> "$GITHUB_ENV"
    #     echo "CXX=clang-cl" >> "$GITHUB_ENV"
    #     echo "CFLAGS=/MD /arch:arm64" >> "$GITHUB_ENV"
    #     echo "CXXFLAGS=/MD /arch:arm64" >> "$GITHUB_ENV"
    #     echo "FC=flang-new" >> "$GITHUB_ENV"

    # - name: Install LLVM (ARM64)  # LLVM (clang-cl, flang-new) -> Cross-toolchain & Fortran
    #   shell: bash -el {0}
    #   run: | # zizmor: ignore[github-env] safe: adding
    #     # Download LLVM installer
    #     curl -L -o LLVM-woa64.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/LLVM-20.1.8-woa64.exe
    #     # Check SHA256 checksum
    #     expected_hash="7c4ac97eb2ae6b960ca5f9caf3ff6124c8d2a18cc07a7840a4d2ea15537bad8e"
    #     file_hash=$(sha256sum LLVM-woa64.exe | awk '{ print $1 }')
    #     if [ "$file_hash" != "$expected_hash" ]; then
    #       echo "Checksum verification failed. The downloaded file may be corrupted or tampered with."
    #       exit 1
    #     fi
    #     # Run the installer silently
    #     cmd.exe /C "LLVM-woa64.exe /S"
    #     # Add LLVM\bin to PATH for the workflow
    #     # echo "PATH=C:/Program Files/LLVM/bin:$PATH" >> "$GITHUB_ENV"
    #     echo "C:/Program Files/LLVM/bin" >> "$GITHUB_PATH"

    # - name: Activate MSVC ARM64 Toolchain (vcvarsall)  # vcpkg + pkgconf -> Provides pkg-config tool for ARM64
    #   shell: bash -el {0}
    #   run: | # zizmor: ignore[github-env] safe: adding
    #     # Run vcvarsall.bat for ARM64 and capture environment variables
    #     # Use cmd.exe /C to run the batch file
    #     cmd.exe /C '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64 && set' > vcvars_env.txt
    #     # Convert Windows CRLF to LF
    #     sed -i 's/\r$//' vcvars_env.txt
    #     # Export environment variables for GitHub Actions
    #     while IFS='=' read -r key value; do
    #       # Skip empty lines
    #       [[ -z "$key" ]] && continue
    #       # Skip lines that are not valid environment variable assignments
    #       if [[ -z "$key" || "$key" =~ ^[^A-Za-z_] ]]; then
    #         continue
    #       fi
    #       # Only allow valid env var names
    #       if [[ -n "$key" && "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
    #           echo "$key=$value" >> "$GITHUB_ENV"
    #       fi
    #       if [ "$key" = "PATH" ]; then
    #         # Also append to PATH properly
    #         echo "$value" >> "$GITHUB_PATH"
    #       fi
    #     done < vcvars_env.txt
    #     echo "âœ… MSVC ARM64 environment exported to GITHUB_ENV and PATH."

    # Meson: Fix current pkg-config executable is coming from Strawberry Perl, not from vcpkg or LLVM
    # - name: Install pkgconf (ARM64) via vcpkg
    #   shell: bash -el {0}
    #   run: | # zizmor: ignore[github-env] safe: adding
    #     set -e

    #     # Install pkgconf for ARM64
    #     export VCPKG_ROOT="C:/vcpkg"  # "/c/vcpkg".Replace("\","/")
    #     # cd "$VCPKG_ROOT"
    #     # ./vcpkg install pkgconf:arm64-windows
    #     # Set the path to pkgconf
    #     PKGCONF_PATH="$VCPKG_ROOT/installed/arm64-windows/tools/pkgconf"
    #     PKG_CONFIG="$PKGCONF_PATH/pkg-config.exe"

    #     # Copying pkgconf.exe to pkg-config.exe for compatibility, Ensure pkg-config exists
    #     # cp "$PKGCONF_PATH/pkgconf.exe" "$PKG_CONFIG"
    #     # Use absolute path to pkg-config
    #     if [ -x "$PKG_CONFIG" ]; then
    #       echo "Found pkg-config at $PKG_CONFIG"
    #     else
    #       echo "ERROR: pkg-config not found at $PKG_CONFIG"
    #       exit 1
    #     fi
    #     echo "Verifying which pkg-config is executable and correct one..."
    #     command -v "$PKG_CONFIG" || echo "pkg-config not found"
    #     "$PKG_CONFIG" --version || echo "pkg-config failed to execute"
    #     # Create a wrapper batch file so Meson/cibuildwheel can call pkg-config from PATH
    #     # Ensure Meson / cibuildwheel uses the vcpkg ARM64 pkgconf executable instead of the default Strawberry Perl
    #     WRAPPER_DIR="$HOME/bin"
    #     mkdir -p "$WRAPPER_DIR"
    #     echo "@echo off
    #     \"$PKG_CONFIG\" %*" > "$WRAPPER_DIR/pkg-config.bat"
    #     # Prepend wrapper dir and pkgconf path to GitHub Actions PATH
    #     echo "$WRAPPER_DIR" >> "$GITHUB_PATH"
    #     echo "$PKGCONF_PATH" >> "$GITHUB_PATH"
    #     # Exports PKG_CONFIG for downstream steps:
    #     # https://github.com/mesonbuild/meson/issues/3500
    #     # https://github.com/Neumann-A/meson-vcpkg
    #     echo "PKG_CONFIG=$PKG_CONFIG" >> "$GITHUB_ENV"
