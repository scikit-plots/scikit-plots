name: Build Dependencies(Win-ARM64)
description: "Common setup steps for Win-ARM64 CI"
runs:
  using: "composite"
  steps:
    - name: "Set environment variables for ARM64 (CC/CXX/CFLAGS)"
      shell: bash -el {0}
      # shell: sh -l {0}
      # shell: cmd /C CALL {0}
      # shell: powershell
      # shell: pwsh
      run: | # zizmor: ignore[github-env] safe: adding
        # echo "CC=clang-cl"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        # echo "CXX=clang-cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        # echo "CFLAGS=/MD /arch:arm64"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        # echo "CXXFLAGS=/MD /arch:arm64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        # echo "FC=flang-new" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CC=clang-cl" >> $env:GITHUB_ENV
        echo "CXX=clang-cl" >> $env:GITHUB_ENV
        echo "CFLAGS=/MD /arch:arm64" >> $env:GITHUB_ENV
        echo "CXXFLAGS=/MD /arch:arm64" >> $env:GITHUB_ENV
        echo "FC=flang-new" >> $env:GITHUB_ENV

    # - name: Install LLVM (ARM64)  # LLVM (clang-cl, flang-new) -> Cross-toolchain & Fortran
    #   shell: pwsh
    #   run: | # zizmor: ignore[github-env] safe: adding
    #     Invoke-WebRequest https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/LLVM-20.1.8-woa64.exe -UseBasicParsing -OutFile LLVM-woa64.exe
    #     $expectedHash = "7c4ac97eb2ae6b960ca5f9caf3ff6124c8d2a18cc07a7840a4d2ea15537bad8e"
    #     $fileHash = (Get-FileHash -Path "LLVM-woa64.exe" -Algorithm SHA256).Hash
    #     if ($fileHash -ne $expectedHash) {
    #         Write-Error "Checksum verification failed. The downloaded file may be corrupted or tampered with."
    #         exit 1
    #     }
    #     Start-Process -FilePath ".\LLVM-woa64.exe" -ArgumentList "/S" -Wait
    #     echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install LLVM (ARM64)  # LLVM (clang-cl, flang-new) -> Cross-toolchain & Fortran
      shell: bash -el {0}
      run: |
        # Download LLVM installer
        curl -L -o LLVM-woa64.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/LLVM-20.1.8-woa64.exe

        # Check SHA256 checksum
        expected_hash="7c4ac97eb2ae6b960ca5f9caf3ff6124c8d2a18cc07a7840a4d2ea15537bad8e"
        file_hash=$(sha256sum LLVM-woa64.exe | awk '{ print $1 }')

        if [ "$file_hash" != "$expected_hash" ]; then
          echo "Checksum verification failed. The downloaded file may be corrupted or tampered with."
          exit 1
        fi

        # Run the installer silently
        cmd.exe /C "LLVM-woa64.exe /S"

        # Add LLVM\bin to PATH for the workflow
        echo "C:/Program Files/LLVM/bin" >> $env:GITHUB_ENV

    # - name: Activate MSVC ARM64 Toolchain (vcvarsall)  # vcpkg + pkgconf -> Provides pkg-config tool for ARM64
    #   shell: pwsh
    #   run: | # zizmor: ignore[github-env] safe: adding pkgconf to PATH amd64_arm64
    #     # Call vcvarsall.bat for ARM64 and capture environment
    #     # & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64
    #     $vcvarsOutput = cmd /C '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64 && set'
    #     $vcvarsOutput -split "`r?`n" | ForEach-Object {
    #         if ($_ -match "^(.*?)=(.*)$") {
    #             "$($matches[1].Trim())=$($matches[2].Trim())" | Out-File -FilePath $env:GITHUB_ENV -Append
    #             if ($matches[1] -eq "PATH") {
    #                 "$($matches[2].Trim())" | Out-File -FilePath $env:GITHUB_PATH -Append
    #             }
    #         }
    #     }
    #     # Write-Host "✅ MSVC ARM64 environment exported to GITHUB_ENV and PATH."

    - name: Activate MSVC ARM64 Toolchain (vcvarsall)  # vcpkg + pkgconf -> Provides pkg-config tool for ARM64
      shell: bash -el {0}
      run: |
        # Run vcvarsall.bat for ARM64 and capture environment variables
        # Use cmd.exe /C to run the batch file
        cmd.exe /C '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64 && set' > vcvars_env.txt

        # Convert Windows CRLF to LF
        sed -i 's/\r$//' vcvars_env.txt

        # Export environment variables for GitHub Actions
        while IFS='=' read -r key value; do
          if [ -n "$key" ]; then
            echo "$key=$value" >> $env:GITHUB_ENV
            if [ "$key" = "PATH" ]; then
              echo "$value" >> $env:GITHUB_PATH
            fi
          fi
        done < vcvars_env.txt

        echo "✅ MSVC ARM64 environment exported to GITHUB_ENV and PATH."

    # - name: Install pkgconf (ARM64) via vcpkg
    #   shell: pwsh
    #   run: | # zizmor: ignore[github-env] safe: adding
    #     $env:VCPKG_ROOT = "C:\vcpkg"
    #     Set-Location $env:VCPKG_ROOT
    #     ./vcpkg install pkgconf:arm64-windows
    #     $pkgconfPath = "$env:VCPKG_ROOT\installed\arm64-windows\tools\pkgconf"
    #     Copy-Item "$pkgconfPath\pkgconf.exe" "$pkgconfPath\pkg-config.exe" -Force
    #     # echo "$pkgconfPath" >> $env:GITHUB_PATH
    #     echo "$pkgconfPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    # Fix current pkg-config executable is coming from Strawberry Perl, not from vcpkg or LLVM
    - name: Install pkgconf (ARM64) via vcpkg
      shell: bash -el {0}
      run: | # zizmor: ignore[github-env] safe: adding
        set -e

        export VCPKG_ROOT="/c/vcpkg"  # "C:/vcpkg".Replace("\","/")
        cd "$VCPKG_ROOT"

        # Install pkgconf for ARM64
        ./vcpkg install pkgconf:arm64-windows

        # Set the path to pkgconf
        PKGCONF_PATH="$VCPKG_ROOT/installed/arm64-windows/tools/pkgconf"
        PKGCONFIG_EXE="$PKGCONF_PATH/pkg-config.exe"

        # Meson respects PKG_CONFIG if set. This bypasses the broken Strawberry Perl binary completely.
        echo "PKG_CONFIG=$PKGCONFIG_EXE" >> $env:GITHUB_ENV

        # Copying pkgconf.exe to pkg-config.exe for compatibility, Ensure pkg-config exists
        cp "$PKGCONF_PATH/pkgconf.exe" "$PKGCONFIG_EXE"
        # Use absolute path to pkg-config
        if [ -x "$PKGCONFIG_EXE" ]; then
          echo "Found pkg-config at $PKGCONFIG_EXE"
        else
          echo "ERROR: pkg-config not found at $PKGCONFIG_EXE"
          exit 1
        fi

        # Prepend to correct pkgconf PATH (Windows style) to GitHub Actions PATH
        # echo "$PKGCONF_PATH" >> $GITHUB_PATH
        echo "$PKGCONF_PATH" >> "$env:GITHUB_PATH"

        # Prepending pkgconf to PATH
        export PATH="$PKGCONF_PATH:$PATH"
        # Removing Strawberry Perl pkg-config from PATH if exists
        # not enough if Strawberry Perl's pkg-config.BAT is earlier in the PATH
        # $(echo "$PATH" | tr ';' '\n' | grep -v 'Strawberry' | grep -v 'perl' | paste -sd ";" -)
        # PATH=$(echo "$PATH" | tr ':' '\n' | grep -vi 'strawberry' | grep -vi 'perl' | paste -sd ":" -)
        echo "Current PATH: $PATH"
        echo "Verifying which pkg-config is executable and correct one..."
        command -v "$PKGCONFIG_EXE" || echo "pkg-config not found in PATH"
        "$PKGCONFIG_EXE" --version || echo "pkg-config failed to execute"
