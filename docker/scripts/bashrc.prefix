#!/usr/bin/env bash
# >>> (bashrc.prefix) scikit-plots personal initialization >>>
#
# Copyright 2018 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ====================================================================
# ________                               _______________
# ___  __/__________________________________  ____/__  /________      __
# __  /  _  _ \_  __ \_  ___/  __ \_  ___/_  /_   __  /_  __ \_ | /| / /
# _  /   /  __/  / / /(__  )/ /_/ /  /   _  __/   _  / / /_/ /_ |/ |/ /
# /_/    \___//_/ /_//____/ \____//_/    /_/      /_/  \____/____/|__/
#
# ====================================================================
#  ____       _ _    _ _              _       _
# / ___|  ___(_) | _(_) |_      _ __ | | ___ | |_ ___
# \___ \ / __| | |/ / | __|____| '_ \| |/ _ \| __/ __|
#  ___) | (__| |   <| | ||_____| |_) | | (_) | |_\__ \\
# |____/ \___|_|_|\_\_|\__|    | .__/|_|\___/ \__|___/
#                              |_|
#  ____           _   _      _   _                     _           _
# / ___|    ___  (_) | | __ (_) | |_           _ __   | |   ___   | |_   ___
# \___ \   / __| | | | |/ / | | | __|  _____  | '_ \  | |  / _ \  | __| / __|
#  ___) | | (__  | | |   <  | | | |_  |_____| | |_) | | | | (_) | | |_  \__ \\
# |____/   \___| |_| |_|\_\ |_|  \__|         | .__/  |_|  \___/   \__| |___/
#                                             |_|
# ====================================================================
#
# to a global/system file /etc/bash.bashrc
# When bash initializes a non-login interactive bash shell on a Debian/Ubuntu-like system, the shell first reads /etc/bash.bashrc and then reads ~/.bashrc.
# System wide initialization file /etc/bash.bashrc and the standard personal initialization file ~/.bashrc if the shell is interactiv–µ.
# https://github.com/tensorflow/build/blob/master/tensorflow_runtime_dockerfiles/cpu.Dockerfile
# https://github.com/tensorflow/build/blob/master/tensorflow_runtime_dockerfiles/bashrc
# https://github.com/jupyter/docker-stacks/issues/815
# https://www.gnu.org/software/bash/manual/bash.html
# https://linux.die.net/man/1/bash
#
# ====================================================================
#
## bash -c 'echo hi'
## Do not print anything if this is not being used interactively
[ -z "$PS1" ] && return
## Only proceed if shell is interactive
## $- contains shell flags (e.g. himBH).
case $- in
  *i*) ;;  # Interactive shell ‚Üí continue
  *) return ;;  # Not interactive ‚Üí stop
esac
#
# ====================================================================
#
# >>> PS1 attractive prompt >>>
# Set up attractive prompt
# Dynamic PS1 with conda/mamba env and git branch (if available)
# Enhanced PS1 with conda env + git branch
export PS1=''
# Show conda/mamba environment name if active (if available)
if command -v conda >/dev/null 2>&1 || command -v micromamba >/dev/null 2>&1; then
  export PS1+='(\[\e[35m\]$(basename "$CONDA_DEFAULT_ENV")\[\e[0m\]) \n'
fi
# Colorize the prompt
# \[\e[0;32m\] - green
# \[\e[0;34m\] - blue
# \[\e[0;35m\] - magenta
# \[\e[0;36m\] - cyan
# \[\e[0;33m\] - yellow
# \[\e[0;31m\] - red
# \[\e[0m\] - reset color
# \! - history number of this command
# \# - command number of this command
# \a - alert (bell)
# \e - escape character
# \n - newline
# \u - username
# \h - hostname (up to the first dot)
# \H - hostname (full)
# \s - shell name
# \j - number of jobs currently managed by the shell
# \l - current terminal device name
# \p - current working directory, with tilde (~) for home
# \d - date in "Weekday Month Date" format
# \t - current time in 24-hour HH:MM:SS format
# \@ - current time in 12-hour am/pm format
# \w - current working directory
# \W - basename of current working directory
# \v - shell version
# \V - shell version with patch level
# export PS1="\[\e[31m\]tf-docker\[\e[m\] \[\e[33m\]\w\[\e[m\] > "
export PS1+='\[\e[31m\]sp-docker\[\e[m\] \[\e[33m\]\w\[\e[m\]'
# Git branch name (if available and in a repo)
# Check if inside a Git repository
# if git rev-parse --is-inside-work-tree &>/dev/null; then
#   # Get branch name or commit (detached head)
#   BRANCH_NAME=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD)
# fi
# Show git branch if inside a repo
export PS1+='$(if git rev-parse --is-inside-work-tree &>/dev/null; then echo -n " (\[\e[36m\]$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)\[\e[m\])"; fi) \n$ '
# ====================================================================
# Set terminal type
# Set TERM to xterm-256color for better color support in terminals
# This is useful for terminals that support 256 colors, like modern terminal emulators.
# It allows for a wider range of colors in terminal applications.
export TERM=xterm-256color
# Set up aliases for common commands
# These aliases enhance the usability of common commands by adding options or changing behavior.
# For example, 'ls' with --color=auto enables colored output for better readability.
alias grep="grep --color=auto"
alias ls="ls --color=auto"
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -alF'
# <<< PS1 attractive prompt <<<
#
# ====================================================================
#
## https://tldp.org/LDP/abs/html/here-docs.html
## cat << EOF >> "$rc_file" ..."$VAR"... EOF  # Expanded variable, command
## cat << 'EOF' | envsubst '${VAR}' >> "$rc_file" ..."$VAR"... EOF  # literal string variable, command
## cat << EOF	Starts heredoc, with variable expansion
## cat << 'EOF'	Starts heredoc, no variable expansion as literal string (safe for scripts)
## EOF (or any other delimiter like EOL, MYMARKER, etc.) is just a label used to indicate the end of a here-document.
## 'EOF' (quoted) vs EOF (unquoted): Just controls whether variable expansion and command substitution happens inside the heredoc.
## Use <<EOF and manually escape variables and command substitution you don't want
## cat << 'EOF' | envsubst '${VAR}' ‚Äî tells it to only expand $VAR, apt-get install -y envsubst
## cat <<EOF "$VAR" OK ‚Äî double quotes inside block
## >> filename is what redirects the output to the file, either appending (>>) or overwriting (>) it.
## >> "$rc_file": Just controls where the heredoc content goes (append mode).
## >>> ASCII banner for scikit-plots >>>
echo -e "\e[1;31m"
# The single quotes (') prevent shell variable expansion or escape issues inside the block. So \ stays \, not interpreted.
# All backslashes (\) are safe ‚Äî no need to double them.
# cat<<TF
# (your banner here)
cat<<'TF'
 ____       _ _    _ _              _       _
/ ___|  ___(_) | _(_) |_      _ __ | | ___ | |_ ___
\___ \ / __| | |/ / | __|____| '_ \| |/ _ \| __/ __|
 ___) | (__| |   <| | ||_____| |_) | | (_) | |_\__ \
|____/ \___|_|_|\_\_|\__|    | .__/|_|\___/ \__|___/
                             |_|

TF
echo -e "\e[0;33m"

if [[ $EUID -eq 0 ]]; then
  cat <<WARN
WARNING: You are running this container as root, which can cause new files in
mounted volumes to be created as the root user on your host machine.

To avoid this, run the container by specifying your user's userid:

$ docker run -u \$(id -u):\$(id -g) args...
WARN
else
  cat << EXPL
You are running this container as user with ID $(id -u) and group $(id -g),
which should map to the ID and group for your user on the Docker host. Great!
EXPL
fi

# Turn off colors
echo -e "\e[m"
# <<< ASCII banner for scikit-plots <<<
#
# ====================================================================
#
# Fix CUDA loading for running nvidia-smi
(command -v ldconfig >/dev/null && [ "$(id -u)" -eq 0 ] && ldconfig) || \
true
#
# ====================================================================
#
# >>> bash-first-run-notice.txt >>>
# { command -v sudo >/dev/null && sudo -n true && cp ./docker/scripts/bash-first-run-notice.txt /etc/bash-first-run-notice.txt; } || true
# sudo cp ./docker/scripts/bash-first-run-notice.txt /etc/bash-first-run-notice.txt || true
# rm -rf ~/.first-run-notice-already-displayed ~/.first-run-notice-shown
echo -e "\n\033[1;33müì¢  First Run Notice:\033[0m
üìù  See Also: cat docker/scripts/bash-first-run-notice.txt
üìù  See Also: cat ~/.bash-first-run-notice.txt
"
## Location of the notice file and marker
## echo "Welcome to the container! Here's how to get started..." > ~/.bash-first-run-notice.txt
## "/etc/skel/.bashrc" is a template file used when creating new user accounts on Unix-like systems.
## Try to show a first-run notice file from a list of candidates it hasn't been shown yet or before
MARKER_FILE=~/.first-run-notice-already-displayed  # init_marker
for NOTICE_FILE in \
  "$(realpath .)/docker/scripts/bash-first-run-notice.txt" \
  ~/.bash-first-run-notice.txt \
  ~/bash-first-run-notice.txt \
  "/etc/skel/.bash-first-run-notice.txt" \
  "/etc/skel/bash-first-run-notice.txt" \
  "/etc/.bash-first-run-notice.txt" \
  "/etc/bash-first-run-notice.txt"
do
  if [[ -f "$NOTICE_FILE" && ! -f "$MARKER_FILE" ]]; then
    cat "$NOTICE_FILE"
    echo  # Newline after notice

    ## Try to create marker to avoid repeating this notice
    touch "$MARKER_FILE" || {
      echo "‚ö†Ô∏è  Could not create marker file at: $MARKER_FILE";
      echo "‚ÑπÔ∏è  Please create it manually to avoid repeating this notice.";
    }
    break  # Only show the first found notice
  fi
done
# <<< bash-first-run-notice.txt <<<
#
# ====================================================================
#
## don't put duplicate lines or lines starting with space in the history.
## See bash(1) for more options
HISTCONTROL=ignoreboth
## append to the history file, don't overwrite it
# shopt -s histappend
## for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# HISTSIZE=1000
# HISTFILESIZE=2000
## check the window size after each command and, if necessary,
## update the values of LINES and COLUMNS.
# shopt -s checkwinsize
#
# ====================================================================
#
## Alias definitions.
## You may want to put all your additions into a separate file like
## ~/.bash_aliases, instead of adding them here directly.
## See /usr/share/doc/bash-doc/examples in the bash-doc package.
## some more ls aliases
# if [ -f ~/.bash_aliases ]; then
#     . ~/.bash_aliases
# fi
#
# ====================================================================
#
# Load modular bash configs if interactive
# ~/.bashrc.d/ and name files like 10-myfeature.bashrc
# if [[ $- == *i* ]]; then
#   for f in ~/.bashrc.d/*.bashrc; do
#     [ -r "$f" ] && . "$f"
#   done
# fi
#
# ====================================================================
# <<< (bashrc.prefix) scikit-plots personal initialization <<<
