# Authors: The scikit-plots developers
# SPDX-License-Identifier: BSD-3-Clause

## This file is the modern replacement for setup.py, used to configure how your Python package is built.
##
## https://packaging.python.org/en/latest/discussions/setup-py-deprecated/#setup-py-deprecated
##
## https://packaging.python.org/en/latest/specifications/pyproject-toml/
## https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#a-full-example
##
## The [build-system] section specifies the build system requirements.
## "setuptools.build_meta" is the default backend used by setuptools for building projects.
## You can add other build like 'mesonpy' dependencies as needed.
##
## https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html
## https://setuptools.pypa.io/en/stable/userguide/declarative_config.html#metadata
##
## SciPy probably the most complex project using Meson and meson-python.
## It combines CPython extensions and libraries written in C, C++, Fortran, Cython, and Pythran.
##
## https://mesonbuild.com/meson-python/tutorials/introduction.html
## https://mesonbuild.com/meson-python/projects-using-meson-python.html
##
## https://setuptools.pypa.io/en/stable/build_meta.html#dynamic-build-dependencies-and-other-build-meta-tweaks
[build-system]
# backend-path = ["_custom_build"]
build-backend = "mesonpy"                   # Specifies the Python backend to use for building the package.
## Purpose: Specifies the build dependencies needed to create the package or run the build process.
requires = [                                # Building an env isolated one
  "meson>=1.5.0",                           # The Meson build system itself to coordinate the compilation of code.
  "ninja>=1.11.0",                          # The Ninja build system used to compile code
  "meson-python>=0.16.0",                   # A PEP 517 backend for building Python packages with Meson.
  "cython>=3.0.8",                          # C/C++ Cython bindings
  "pybind11>=2.13.0",                       # C/C++ Pybind bindings
  "pythran>=0.14.0",
  ## numpy requirement for wheel builds for distribution on PyPI - building
  ## against 2.x yields wheels that are also compatible with numpy 1.x at
  ## runtime.
  ## Note that building against numpy 1.x works fine too - users and
  ## redistributors can do this by installing the numpy version they like and
  ## disabling build isolation.
  "numpy>=2.0.0",                           # Numpy C-Api Headers and python module
  ## Add other dependencies here if needed
  "scipy>=1.6.0",
]

######################################################################
## project
######################################################################

## The [project] section contains metadata about your project.
## https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html
## https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html#dynamic-metadata
[project]
name = "scikit-plots"                       # The name of your project
dynamic = ["version"]                       # Determined dynamically, inside one of meson.build, setup.cfg, setuptools.dynamic
description = "An intuitive library to add plotting functionality to scikit-learn objects."

## Keywords to describe your project, useful for searchability
## https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#keywords
## https://packaging.python.org/en/latest/specifications/core-metadata/#keywords
keywords = [
  "data science",
  "machine learning",
  "visualization",
  "matplotlib",
  "scikit-learn",
  "xgboost",
  "catboost",
  "tensorflow",
  "keras",
  "pytorch",
  "transformers",
]

## Classifiers help users understand the maturity, audience,
## and compatible environments for your project.
## https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers
## https://packaging.python.org/en/latest/specifications/core-metadata/#classifier-multiple-use
## https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  ## If defined required to fully compatible with SPDX license expression by license-files
  ## or use test or file license = {file = "LICENSE"}
  # 'License :: OSI Approved :: BSD License',
  # 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
  # "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  'Programming Language :: C',
  'Programming Language :: C++',
  'Programming Language :: Cython',
  'Programming Language :: Fortran',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.5",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Visualization",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

## License information is critical. It's recommended to specify the license file.
## https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#license
## https://packaging.python.org/en/latest/specifications/core-metadata/#license-file-multiple-use
## TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)
## at that point, no longer include them in `py3.install_sources()`
## [[project.license]]  # Usage individually, If Needed
## If defined required to fully compatible with SPDX license expression by license-files
## or use test or file license = {file = "LICENSE"}
# license = {file = "LICENSE"}  # Primary license file
## https://spdx.org/licenses/BSD-3-Clause.html
license = 'BSD-3-Clause'  # 'MIT', 'Apache-2.0', 'GPL-3.0-or-later',

## [tool.meson-python]
## license-files field to be used only if the license field contains a valid SPDX license expression.
license-files = ['LICENSE', 'LICENSES/*', 'LICEN[CS]E*/*']

## The readme file this is what users will see on your project's PyPI page.
## https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#readme
## [[project.readme]]  # Usage individually, If Needed
## file = "README.md"
## content-type = "text/x-rst"
## readme = "README.md"
readme = {file = "README.md", content-type = "text/markdown"}

## List the authors of the project
## https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#authors-maintainers
## [[project.authors]]  # Usage individually, If Needed
authors = [
  # {name = "scikit-plots developers", email=""},
  # {name = "Reiichiro Nakano et al.", email = "reiichiro.s.nakano@gmail.com"},
  # {name = "Prateek Sharma", email = "s.prateek3080@gmail.com"},
  # ...
]
## Project maintainers
## [[project.maintainers]]  # Usage individually, If Needed
maintainers = [
  {name = "scikit-plots developers", email=""},
]

## Specify the minimum Python version required
## https://packaging.python.org/en/latest/specifications/core-metadata/#requires-python
requires-python = ">=3.9"

#Purpose: Specifies the runtime dependencies needed for the project to run after it's installed.
## https://setuptools.pypa.io/en/stable/userguide/dependency_management.html#declaring-required-dependency
dependencies = [  # pipreqs: Automatically scans the codebase and detects the used libraries.
  # pipreqs ./scikitplot
  # Dependencies required for pip installation
  "numpy>=1.24.4",                           # Numpy C-Api Headers and python module
  "scipy>=1.6.0",
  "pandas>=1.5",                            # Data analysis
  "matplotlib>=3.5",                        # Plotting
  "aggdraw>=1.3.19",                        # visualkeras dep high-quality drawing, with anti-aliasing and alpha compositing
  "scikit-learn>=1.1",                      # Machine learning
  "joblib>=1.2.0",
  "threadpoolctl>=3.1.0",
]

######################################################################
## optional-dependencies
## python -m pip install --no-build-isolation --no-cache-dir -e .[dev,build,test,docs,gpu] -v
######################################################################

## Development dependencies (for linting, type checking, and general dev tools)
## https://setuptools.pypa.io/en/stable/userguide/dependency_management.html#optional-dependencies
## https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#direct-url-dependencies
## https://peps.python.org/pep-0508/
## https://peps.python.org/pep-0735/#deferred-ideas
[project.optional-dependencies]
## python -m pip install --no-build-isolation --no-cache-dir -e .[dev,build,test,docs,gpu] -v
# Core dependencies that are used in multiple groups
core = [
  # Dependencies required for pip installation
  "numpy>=1.24.4",                           # Numpy C-Api Headers and python module
  "scipy>=1.6.0",
  "pandas>=1.5",                            # Data analysis
  "matplotlib>=3.5",                        # Plotting
  "aggdraw>=1.3.19",                        # visualkeras dep high-quality drawing, with anti-aliasing and alpha compositing
  "scikit-learn>=1.1",                      # Machine learning
  "joblib>=1.2.0",
  "threadpoolctl>=3.1.0",
  # optionally
  "seaborn>=0.11",                          # Statistical plotting
  "plotly>=5.10",                           # Interactive plotting
  "pyarrow>=12.0.0",                        # Arrow format
  # "polars>=0.20.30",                        # DataFrame library
  # "pillow>=10.1.0",                         # Image processing
  # "scikit-image>=0.17.2",                   # Image processing
]
dev = [
  "scikit-plots[core]",                     # Reference the 'core' group as a dependency
  "pre-commit",                             # Git hook scripts are useful for identifying simple issues before submission to code review. ".pre-commit-config.yaml"
  "pydevtool",                              # Development tools
  "pycodestyle",                            # PEP-8 compliance
  "black>=24.3.0",                          # Code formatting
  "ruff>=0.5.1",                            # Linting
  "cython-lint>=0.12.2",                    # Linting for Cython
  "mypy>=1.9.0",                            # Type checking
  "types-psutil",                           # Type stubs for psutil
  "typing_extensions",                      # Backports for older Python versions
  "rich-click",                             # Enhanced CLI
  "doit>=0.36.0",                           # Task automation
]
## Build dependencies (for packaging and building extensions)
build = [
  "scikit-plots[core]",                     # Reference the 'core' group as a dependency
  "meson>=1.5.0",                           # The Meson build system itself to coordinate the compilation of code.
  # 'ninja; sys_platform != "emscripten"',
  "ninja>=1.11.0",                          # The ninja build system used to compile code
  "meson-python>=0.16.0",                   # A PEP 517 backend for building Python packages with Meson.
  "cython>=3.0.8",                          # Cython bindings for extensions
  "pybind11>=2.13.2",                       # Python bindings
  "pythran>=0.14.0",                        # Static Python compiler
  ## packaging
  "build",                                  # Standard Python build tool
  "twine",                                  # Upload to PyPI
]
## Testing dependencies
test = [
  "scikit-plots[core]",                     # Reference the 'core' group as a dependency
  "hypothesis>=6.130.0",                    # Property-based testing
  "pytest>=7.1.2",                          # Core testing framework
  "pytest-cov",                             # Coverage reports
  "pytest-fail-slow",
  "pytest-mpl",                             # Matplotlib testing
  "pytest-run-parallel",
  "pytest-timeout",
  "pytest-xdist",                           # Use Multiple CPUs to speed up
  "pyamg",                                  # Algebraic multigrid solvers
]
## Documentation dependencies
docs = [
  "scikit-plots[core]",                     # Reference the 'core' group as a dependency
  "packaging>=24.2",                        # Package utilities
  "pooch>=1.6.0",                           # Data by downloading files from a server
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "jinja2>=3.1.2",                          # Templating engine
  "sphinx>=5.0.0,<100.0.0",                 # Documentation generator
  "sphinx-rtd-theme",                       # ReadTheDocs theme
  "pydata-sphinx-theme",                    # PyData theme
  "sphinx-gallery",                         # Gallery examples
  "sphinx-prompt",                          # Shell prompts
  "sphinxext-opengraph",                    # Social media metadata
  "sphinx-copybutton",                      # Copy button for code blocks
  "sphinxcontrib-sass",                     # SASS support
  "sphinx-design",                          # Modern design elements
  "sphinx-remove-toctrees",                 # Customize toctrees
  "myst-parser",                            # Markdown support
  "myst-nb",                                # Jupyter Notebook integration
  "jupyter-sphinx",                         # Jupyter integration
  "jupyterlite-sphinx",                     # JupyterLite integration
  "jupyterlite-pyodide-kernel",             # Pyodide support
  "jupytext",                               # Text-based Notebook formats
  "intersphinx_registry",                   # Intersphinx management
  "colorspacious",                          # Color management
  "sphinxcontrib-svg2pdfconverter",         # SVG to PDF conversion
  "sphinxcontrib-inlinesyntaxhighlight",    # Inline syntax highlighting
  "sphinx-tabs",                            # Tabbed content
  "sphinx-tags",                            # Tagging support
  "towncrier",
  # models
  "catboost",                               # Gradient boosting
  "xgboost",                                # Gradient boosting
]
## Maintenance tools
maintenance = [
  "conda-lock==3.0.0",                      # Dependency lock files for Conda
]
## Specialized dependencies for specific hardware
cpu = [
  ## https://pytorch.org/get-started/locally/#start-locally
  # "torch",  # PyTorch
  # "torchvision",  # PyTorch
  # "torchaudio",  # PyTorch
  ##
  # "jax",#"jaxlib",                          # import jax.numpy as jnp
  ## On Python >= 3.13, it installs exactly tensorflow-cpu==2.15.0.
  # "tensorflow-cpu==2.15.0; python_version >= '3.13'",  # import tensorflow as tf
  "tensorflow-cpu",                         # import tensorflow as tf
  ##
  "transformers",                           # import transformers
  "tf-keras",                               # keras compatibility
]
gpu = [
  ## https://docs.cupy.dev/en/stable/install.html#installing-cupy-from-pypi
  "cupy-cuda12x",                           # GPU-based numerical computing
  ##
  ## https://pytorch.org/get-started/locally/#start-locally  --index-url https://download.pytorch.org/whl/cu124
  # "torch",  # PyTorch
  # "torchvision",  # PyTorch
  # "torchaudio",  # PyTorch
  ##
  ## JAX: https://jax.readthedocs.io/en/latest/installation.html#installation
  ## "jax[cuda11_cudnn805] -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",  # import jax.numpy as jnp
  ## "jax[cuda] -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",             # import jax.numpy as jnp
  # "jax[cuda12]",                          # import jax.numpy as jnp
  ##
  # "tensorflow[and-cuda]",                   # import tensorflow as tf
  ##
  # "transformers",                           # import transformers
  # "tf-keras",                               # keras compatibility
  ##
  # "ivy",                                    # https://github.com/ivy-llc/ivy
]
tpu = [
  ## JAXlib is a library by DeepMind that provides the low-level bindings for JAX and allows you to perform tensor computations on TPU, GPU, and CPU.
  ## https://jax.readthedocs.io/en/latest/installation.html#installation  -f https://storage.googleapis.com/jax-releases/libtpu_releases.html
  # "jax[tpu]"                                # TPU-accelerated machine learning
  ##
  # "dm-haiku",  # neural network library built on top of JAX by Google Research
  # "flax",      # Flax is another JAX-based library but with a more comprehensive set of tools for defining neural networks.
  #
  "tensorflow",                             # TPU-accelerated machine learning
  #
  "transformers",                           # import transformers
  "tf-keras",                               # keras compatibility
]

######################################################################
## pip, uv
######################################################################

[tool.pip]
extra-index-url = "https://download.pytorch.org/whl/cu124"  # PyTorch custom index GPU 12.4

## https://docs.astral.sh/uv/guides/integration/pytorch/#installing-pytorch
# [tool.uv]
# conflicts = [[{ extra = "cpu" }, { extra = "gpu" }, { extra = "tpu" }]]
# [tool.uv.sources]
# torch = [
#   { index = "pytorch-cpu", marker = "platform_system != 'Darwin' and platform_machine != 'aarch64'" },
#   { index = "pytorch-cu124", marker = "platform_system != 'Darwin' and platform_machine != 'aarch64'" },
# ]
# torchvision = [
#   { index = "pytorch-cpu", marker = "platform_system != 'Darwin' and platform_machine != 'aarch64'" },
#   { index = "pytorch-cu124", marker = "platform_system != 'Darwin' and platform_machine != 'aarch64'" },
# ]
# [[tool.uv.index]]
# name = "pytorch-cpu"
# url = "https://download.pytorch.org/whl/cpu"
# explicit = true
# [[tool.uv.index]]
# name = "pytorch-cu124"
# url = "https://download.pytorch.org/whl/cu124"
# explicit = true

######################################################################
## project.urls
######################################################################

# Links to important pages related to the project
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls
# https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
# https://packaging.python.org/en/latest/specifications/core-metadata/#deprecated-fields
[project.urls]
# homepage (Homepage)
homepage        = "https://scikit-plots.github.io"
# source (Source Code), repository, sourcecode, github
repository      = "https://github.com/scikit-plots/scikit-plots"
# download (Download), equivalent to Download-URL
download        = "https://github.com/scikit-plots/scikit-plots"
# changelog (Changelog), changes, whatsnew, history
# The changelog, really useful for ongoing users of your project
changelog       = "https://scikit-plots.github.io/dev/whats_new/index.html"
# releasenotes (Release Notes)
# documentation (Documentation), docs
documentation   = "https://scikit-plots.github.io"
# issues (Issue Tracker), "Bug Tracker"
# bugs, issue, tracker, issuetracker, bugtracker
issues          = "https://github.com/scikit-plots/scikit-plots/issues"
# funding (Funding), sponsor, donate, donation
# Donate        = "https://github.com/scikit-plots/scikit-plots#donate"
# Forum         = "https://github.com/orgs/scikit-plots/discussions"
# Forked        = "https://github.com/reiinakano/scikit-plot"

# Advanced plugins: Creating executable scripts
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#advanced-plugins
# https://setuptools.pypa.io/en/stable/userguide/entry_point.html#entry-points-syntax
# [project.scripts]
# my-script = "my_package.module:function"
# [project.scripts]
# spam-cli = "spam:main_cli"
# [project.gui-scripts]
# spam-gui = "spam:main_gui"
# [project.entry-points."spam.magical"]
# tomatoes = "spam:main_tomatoes"

######################################################################
## pytest
######################################################################

# Configuration for the pytest testing framework
[tool.pytest.ini_options]
minversion = "6.0"  # Specify the minimum version of pytest
log_cli_level = "info"
xfail_strict = true
filterwarnings = [
  "error",
]
## Add command-line options
addopts = [
  "--color=yes",
  "--doctest-rst",
  "--strict-config",
  "--strict-markers",
  "-p no:legacypath",
]
testpaths = [
  "scikitplot",
]  # Directories where tests are located

######################################################################
## ruff
######################################################################

[tool.ruff]
## https://docs.astral.sh/ruff/
## ruff.toml or .ruff.toml (Ruff config file)
## ruff configuration

cache-dir = "~/.cache/ruff"

exclude = [
  ".git",
  "__pycache__",
  "build",
  "dist",
  #
  "auto_building_tools",
  "benchmarks",
  "docs/source",
  "galleries",
  "third_party",
  "tools",
  "scikitplot/_api",
  "scikitplot/_astropy",
  "scikitplot/_build_utils",
  "scikitplot/_clv",
  "scikitplot/_externals",
  "scikitplot/_factory_api",
  "scikitplot/_seaborn",
  "scikitplot/_tweedie",
  "scikitplot/_utils",
  "scikitplot/_xp_core_lib",
  "scikitplot/api",
  "scikitplot/experimental",
  "scikitplot/probscale",
  "scikitplot/kds",
  "scikitplot/modelplotpy",
  "scikitplot/sphinxext",
  "scikitplot/visualkeras",
  "scikitplot/_testing",
  "**tests",
  "dev.py",
  "scikitplot/_distributor_init.py",
  "scikitplot/_config.py",
  "scikitplot/_min_dependencies.py",
  "scikitplot/cbook.pyi",
  "scikitplot/cbook.py",
  "scikitplot/_preprocess.py",
  "scikitplot/conftest.py",
  "scikitplot/__init__.pyi",
  "scikitplot/__config__.pyi",
]

# fix = true

# indent-width = 2

line-length = 88  # Ensure this matches Black
indent-width = 4

# Enable preview features, will use unstable rules, fixes, and formatting.
# preview = true

# respect-gitignore = true

# Enumerate all fixed violations.
# show-fixes = true

# Always generate Python 3.8-compatible code.
# target-version = "py38"

# unsafe-fixes = null

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

# Format all docstring code snippets with a line length of 60.
# docstring-code-line-length = 60

exclude = [
  "auto_building_tools",
  "benchmarks",
  "docs/source",
  "galleries",
  "third_party",
  "tools",
  "scikitplot/_api",
  "scikitplot/_astropy",
  "scikitplot/_build_utils",
  "scikitplot/_clv",
  "scikitplot/_externals",
  "scikitplot/_factory_api",
  "scikitplot/_seaborn",
  "scikitplot/_tweedie",
  "scikitplot/_utils",
  "scikitplot/_xp_core_lib",
  "scikitplot/api",
  "scikitplot/experimental",
  "scikitplot/probscale",
  "scikitplot/kds",
  "scikitplot/modelplotpy",
  "scikitplot/sphinxext",
  "scikitplot/visualkeras",
  "scikitplot/_testing",
  "**tests",
  "dev.py",
  "scikitplot/_distributor_init.py",
  "scikitplot/_config.py",
  "scikitplot/_min_dependencies.py",
  "scikitplot/cbook.pyi",
  "scikitplot/cbook.py",
  "scikitplot/_preprocess.py",
  "scikitplot/conftest.py",
  "scikitplot/__init__.pyi",
  "scikitplot/__config__.pyi",
]

# Use tabs instead of 4 space indentation.
# indent-style = "tab"
indent-style = "space"  # Use spaces for indentation

# Use `\n` line endings for all files
line-ending = "lf"

# Prefer single quotes over double quotes.
quote-style = "double"  # Black uses double quotes by default

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

[tool.ruff.lint]
# all rules can be found here: https://beta.ruff.rs/docs/rules/
# This enables us to use CPY001: copyright header check
preview = true
# This enables us to use the explicit preview rules that we want only
explicit-preview-rules = true  # Enable explicit preview rules
# Specify which linting rules to enable.
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "E",    # pycodestyle (formatting errors)
  "F",    # Pyflakes (logical errors)
  "N",    # pep8-naming (naming conventions)
  "D",    # pydocstyle (docstring enforcement)
  "S",    # flake8-bandit (security checks)
  # "W",
  # "CPY001",
]
ignore = [
  # space before : (needed for how black formats slicing)
  "E203",
  # do not assign a lambda expression, use a def
  "E731",
  # do not use variables named 'l', 'O', or 'I'
  "E741",
  # E721 is in preview (july 2024) and gives many false positives.
  # Use `is` and `is not` for type comparisons, or `isinstance()` for
  # isinstance checks
  "E721",
  # F841 is in preview (july 2024), and we don't care much about it.
  # Local variable ... is assigned to but never used
  "F841",
  "EM101",  # Exception must not use a string literal, assign to variable first
  "E501",
  "ARG001", "ARG002",  # Unused method argument
  "G004",  # Logging statement uses f-string
  "S110",  # `try`-`except`-`pass` detected, consider logging the exception
  "E722",  # Do not use bare `except`
  "EM102",  # Exception must not use an f-string literal, assign to variable first
  "PLR0913",  # Too many arguments in function definition (6 > 5)
  "RUF100",  # Prevent Ruff from removing `# noqa`
  "EXE002",  # Ignore shebang missing warning
]

# [tool.ruff.lint.per-file-ignores]
[tool.ruff.lint.extend-per-file-ignores]
"test_*.py" = [
    "ANN201",  # Public function without return type annotation
    "B018",  # UselessExpression
    "D",  # pydocstyle
    "S101",  # Use of assert detected
]
".pyinstaller/*.py" = ["INP001"]  # Not a package.
"conftest.py" = ["INP001"]  # Part of configuration, not a package.
"docs/*.py" = [
    "INP001",  # implicit-namespace-package. The examples are not a package.
]
"__init__.py" = ["F403"]  # Wildcard imports

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
# "scikitplot/__init__.py"=["F822"]  # __all__ has un-imported names
# Ignore `D` rules everywhere except for the `src/` directory.
"!src/**.py" = ["D"]
# It's fine not to put the import at the top of the file in the examples
# folder.
"!**/tests/**"=["CPY001"]
"!.github/**"=["CPY001"]
"!.spin/**"=["CPY001"]
"!auto_building_tools/**"=["CPY001"]
"benchmarks/**"=["CPY001"]
"!docs/**"=["CPY001"]
"!docs/conf.py"=["E402"]
"!galleries/**"=["E402"]
"!scikitplot/_build_utils/**"=["CPY001"]
"!tools/**"=["CPY001"]
# __doc__ is too long (>4096 chars) and therefore false positive on copyright check
# "examples/model_selection/plot_precision_recall.py"=["CPY001"]

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\#\\ Authors:\\ The\\ scikit\\-plots\\ developers\\\r?\\\n\\#\\ SPDX\\-License\\-Identifier:\\ BSD\\-3\\-Clause"

[tool.ruff.lint.isort]
known-first-party = ["scikitplot"]

[tool.ruff.lint.pydocstyle]
# Enforce NumPy docstring conventions
convention = "numpy"

######################################################################
## black
######################################################################

# Black is a code formatter; this section configures its behavior.
[tool.black]
line-length = 88  # Maximum line length 88
target-version = ['py38', 'py39']  # Python versions to target
preview = true     # Enable Black's preview features

extend-exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.mypy_cache
  | \.vscode
  | auto_building_tools
  | benchmarks
  | build
  | dist
  | docs/build
  | docs/source
  | galleries
  | scikitplot/externals
  | scikitplot/_astropy/stats/tests
  | scikitplot/_seaborn
  | scikitplot/modelplotpy
  | scikitplot/probscale
  | scikitplot/visualkeras
  | third_party
  | tools
  | tests
)/
'''

######################################################################
## isort
######################################################################

[tool.isort]
profile = "black"

######################################################################
## cython-lint
######################################################################

[tool.cython-lint]
# Ignore the same error codes as ruff
# + E501 (line too long) because keeping it < 88 in cython
# often makes code less readable.
ignore = [
  # multiple spaces/tab after comma
  'E24',
  # space before : (needed for how black formats slicing)
  'E203',
  # line too long
  'E501',
  # do not assign a lambda expression, use a def
  'E731',
  # do not use variables named 'l', 'O', or 'I'
  'E741',
  # line break before binary operator
  'W503',
  # line break after binary operator
  'W504',
  # expected 2 blank lines
  'E302',
  # imported but unused
  # 'F401',
]
# Exclude files are generated from tempita templates
exclude= '''
(
    asv_benchmarks/
  | scikitplot/metrics/_dist_metrics.pyx
)
'''

######################################################################
## codespell
######################################################################

[tool.codespell]
# .codespellrc ini file
skip = """
    *.cff,
    docs/credits.rst,
    galleries/*,
    scikitplot/_astropy/*,
    scikitplot/_seaborn/*,
    third_party/*,
    tools/*,
    *_externals/*,
"""
count = true
# quiet-level = 3

# The following list of words for codespell to ignore may contain some
# misspellings that should be revisited and fixed in the future.
# ignore-words = "build_tools/codespell_ignore_words.txt"
ignore-words-list = "./.codespell-ignore-words"

######################################################################
## repo-review
######################################################################

[tool.repo-review]
ignore = [
    "MY",    # ignore MyPy setting checks
    "PC111", # ignore using `blacken-docs` in pre-commit
    "PC140", # ignore using `mypy` in pre-commit
    "PC180", # ignore using `prettier` in pre-commit
    "PC901", # ignore using custom update message (we have many of the default ones in our history already)
    "PP308", # ignore requiring `-ra` flag for pytest, astropy's test suite is too large for this to be useful
    "PY005", # ignore requiring a root level "test*" directory
]

######################################################################
## cibuildwheel
######################################################################

[tool.cibuildwheel]
# Note: the below skip command doesn't do much currently, the platforms to
# build wheels for in CI are controlled in `.github/workflows/wheels.yml` and
# `tools/ci/cirrus_wheels.yml`.
build-frontend = "build"
skip = "cp36-* cp37-* cp-38* pp37-* *-manylinux_i686 *_ppc64le *_s390x *_universal2"
# cibuildwheel to represent
# {project} might be used for higher-level tasks, like referencing the project root.
# {package} is used to refer to the specific package directory
before-build = "bash {project}/tools/wheels/cibw_before_build.sh {project}"
# The build will use openblas64 everywhere, except on arm64 macOS >=14.0 (uses Accelerate)
config-settings = "setup-args=-Duse-ilp64=true setup-args=-Dallow-noblas=false build-dir=build"
before-test = "pip install -r {project}/requirements/test.txt"
test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
# environment = {}
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
musllinux-x86_64-image = "musllinux_1_2"

# Linux-specific environment variables
[tool.cibuildwheel.linux.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
LD_LIBRARY_PATH = "/project/.openblas/lib:$LD_LIBRARY_PATH"
PKG_CONFIG_PATH = "/project/.openblas"
CIBW_ENVIRONMENT = "PKG_CONFIG_PATH=/project/.openblas"
# RUNNER_OS is a GitHub Actions specific env var; define it here so it works on Cirrus CI too
RUNNER_OS="Linux"

[tool.cibuildwheel.macos]
# universal2 wheels are not supported (see gh-21233), use `delocate-fuse` if you need them
# note that universal2 wheels are not built, they're listed in the tool.cibuildwheel.skip
# section
# Not clear why the DYLD_LIBRARY_PATH is not passed through from the environment
repair-wheel-command = [
  "export DYLD_LIBRARY_PATH=$PWD/.openblas/lib",
  "echo DYLD_LIBRARY_PATH $DYLD_LIBRARY_PATH",
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
]

# macOS-specific environment variables
[tool.cibuildwheel.macos.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
DYLD_LIBRARY_PATH = "/project/.openblas/lib"
PKG_CONFIG_PATH = "/project/.openblas"
CIBW_ENVIRONMENT_MACOS = "PKG_CONFIG_PATH=/project/.openblas"

[tool.cibuildwheel.windows]
# config-settings = "setup-args=--vsenv setup-args=-Dallow-noblas=false build-dir=build"
repair-wheel-command = "bash -el ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

# [[tool.cibuildwheel.overrides]]
# select = [
#   "*-win32",
##   "*-win_amd64"
# ]
# config-settings = "setup-args=--vsenv setup-args=-Dallow-noblas=true build-dir=build"
# repair-wheel-command = ""  # Leave empty if no repair script is needed

# Windows-specific environment variables
[tool.cibuildwheel.windows.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
PATH = "{project}/.openblas/lib;$PATH"
PKG_CONFIG_PATH = "{project}/.openblas"
CIBW_ENVIRONMENT_WINDOWS = "PKG_CONFIG_PATH={project}/.openblas"

[tool.cibuildwheel.pyodide]
config-settings = "build-dir=build setup-args=--cross-file=$PWD/tools/ci/emscripten/emscripten.meson.cross setup-args=-Dblas=none setup-args=-Dlapack=none"

[[tool.cibuildwheel.overrides]]
select = "*pyodide*"
before-test = "pip install -r {project}/requirements/emscripten_test.txt"
# Pyodide ensures that the wheels are already repaired by auditwheel-emscripten
repair-wheel-command = ""
test-command = "python -m pytest --pyargs numpy -m 'not slow'"

######################################################################
## doit
######################################################################

# [tool.doit]
# dodoFile = "dev.py"

######################################################################
## gilesbot
## https://github.com/scientific-python/action-towncrier-changelog
######################################################################

[tool.gilesbot]
  ## https://github.com/Cadair/giles
  [tool.gilesbot.circleci_artifacts]
    enabled = true

  [tool.gilesbot.pull_requests]
    enabled = true

  ## To enable checking of milestones
  # [tool.gilesbot.milestones]
  #   enabled = true

  ## Towncrier Changelog Checking
  [tool.gilesbot.towncrier_changelog]
    enabled = true  # default is false
    whatsnew_label = "whats_new-needed"  # default
    changelog_noop_label = "skip-changelog-checks"  # default
    changelog_skip_label = "no-changelog-entry-needed"  # default is none
    verify_pr_number = true  # default is false
    number_incorrect_long = """The number in the changelog file you added
      does not match the number of this pull request. Please rename the file."""
    help_url = "https://github.com/scikit-plots/scikit-plots/blob/main/docs/source/whats_new/upcoming_changes/README.md"
    changelog_missing_long = """There isn't a changelog file in this pull request.
      Please add a changelog file to the `docs/source/whats_new/upcoming_changes/`
      directory following the instructions in the changelog
      [README](https://github.com/scikit-plots/scikit-plots/blob/main/docs/source/whats_new/upcoming_changes/README.md)."""
    type_incorrect_long = """The changelog file you added is not one of the allowed types.
      Please use one of the types described in the changelog
      [README](https://github.com/scikit-plots/scikit-plots/blob/main/docs/source/whats_new/upcoming_changes/README.md)"""
    whatsnew_pattern = '''docs/source/whats_new/[^/]+/[^/]+/v?\d+\.[^.]+\.rst'''

######################################################################
## towncrier
## https://github.com/scientific-python/action-towncrier-changelog
######################################################################

[tool.towncrier]
    all_bullets  = false
    single_file  = true
    issue_format = ":pr:`{issue}`"
    underlines = "=-^"
    package      = "scikitplot"
    filename     = "docs/source/whats_new/v0.5.rst"
    directory    = "docs/source/whats_new/upcoming_changes"
    template     = "docs/source/whats_new/upcoming_changes/towncrier_template.rst.jinja2"

    # === towncrier.type ===

    [[tool.towncrier.type]]
        directory = "major-feature"
        name = "|MajorFeature|"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "feature"
        name = "|Feature|"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "efficiency"
        name = "|Efficiency|"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "enhancement"
        name = "|Enhancement|"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "fix"
        name = "|Fix|"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "api"
        name = "|API|"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "other"
        name = ""
        showcontent = true

    # === towncrier.section ===

    [[tool.towncrier.section]]
        name = "Support for Array API"
        path = "array-api"

    [[tool.towncrier.section]]
        name = "Changed models"
        path = "changed-models"

    [[tool.towncrier.section]]
        name = "Security"
        path = "security"

    [[tool.towncrier.section]]
        name = "Changes impacting many modules"
        path = "many-modules"

    [[tool.towncrier.section]]
        name = "Metadata routing"
        path = "metadata-routing"

    [[tool.towncrier.section]]
        name = "custom-top-level"
        path = "custom-top-level"

    [[tool.towncrier.section]]
        name = ":mod:`scikitplot._astropy`"
        path = "scikitplot._astropy"

    [[tool.towncrier.section]]
        name = ":mod:`scikitplot._seaborn`"
        path = "scikitplot._seaborn"

    [[tool.towncrier.section]]
        name = ":mod:`scikitplot.api`"
        path = "scikitplot.api"

    [[tool.towncrier.section]]
        name = ":mod:`scikitplot.utils`"
        path = "scikitplot.utils"

######################################################################
## meson-python
######################################################################

# [tool.meson-python]
# meson = 'vendored-meson/meson/meson.py'

# [tool.meson-python.args]
# install = ['--tags=runtime,python-runtime,tests,devel']

######################################################################
## spin
######################################################################

## https://github.com/scientific-python/spin
# [tool.spin]
# package = 'numpy'

# [tool.spin.meson]
# cli = 'vendored-meson/meson/meson.py'

# [tool.spin.commands]
# "Build" = [
#   ".spin/cmds.py:build",
#   ".spin/cmds.py:test",
#   ".spin/cmds.py:mypy",
#   ".spin/cmds.py:config_openblas",
#   ".spin/cmds.py:lint",
# ]
# "Environments" = [
#   "spin.cmds.meson.run",
#   ".spin/cmds.py:ipython",
#   ".spin/cmds.py:python",
#   "spin.cmds.meson.gdb",
#   "spin.cmds.meson.lldb"
# ]
# "Documentation" = [
#   ".spin/cmds.py:docs",
#   ".spin/cmds.py:changelog",
#   ".spin/cmds.py:notes",
#   ".spin/cmds.py:check_docs",
#   ".spin/cmds.py:check_tutorials",
# ]
# "Metrics" = [".spin/cmds.py:bench"]

######################################################################
##
######################################################################
