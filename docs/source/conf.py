# 
# conf
# scikit-plots documentation build configuration file, created by
# sphinx-quickstart on Sun Feb 12 17:56:21 2017.
# 
"""
scikit-plots documentation build config file, created by sphinx-quickstart.

This file is executed with the current directory set to its containing dir
by ``execfile()``, e.g. the working directory will be scikit-plots/docs.
Ensure that all specified paths relative to the docs directory are made
absolute by using ``os.path.abspath``.

Note that not all possible configuration values are present in this
autogenerated file.

All configuration values have a default; values that are commented out
serve to show the default.

See: https://www.sphinx-doc.org/en/master/usage/configuration.html
for more details on configuring the documentation build.
"""

##########################################################################
## Imports
##########################################################################

# Python's standard library
import os
import sys

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.join(os.path.dirname(__file__), "_sphinx_ext/sklearn_ext"))
sys.path.insert(0, os.path.abspath("."))


import re
import json
import warnings
from pathlib import Path
from datetime import datetime
from urllib.request import urlopen

import jinja2
from sphinx.application import Sphinx
import sphinx_gallery

# Set up logging
from sphinx.util.logging import getLogger
logger = getLogger(__name__)

# import logging
# logger = logging.getLogger(__name__)
# logger.setLevel(logging.INFO)
# handler = logging.StreamHandler()
# handler.setLevel(logging.INFO)
# formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# handler.setFormatter(formatter)
# logger.addHandler(handler)


try:
    # Set the backend of matplotlib to prevent build errors.
    import matplotlib
    matplotlib.use("agg")

    # Configure plotly to integrate its output into the HTML pages generated by
    # sphinx-gallery.
    import plotly.io as pio
    pio.renderers.default = "sphinx_gallery"
except ImportError:
    # Make it possible to render the doc when not running the examples
    # that need plotly.
    pass

##########################################################################
## Project information
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information
##########################################################################

# General information about the project.
project = u'scikit-plots'
# author = u'Reiichiro S. Nakano'
author = u'Muhammed Çelik'
# A copyright statement. Permitted styles are as follows,
# where ‘YYYY’ represents a four-digit year.
# The project_copyright alias.
# copyright = u'2017, Reiichiro S. Nakano'
copyright = f"2024 - {datetime.now().year}, Muhammed Çelik (BSD License)"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# Import scikitplot information.
import scikitplot as skplt
# from sklearn.externals._packaging.version import parse
from scikitplot.externals._packaging.version import parse

raw_version = skplt.__version__
parsed_version = parse(raw_version)
version = ".".join(parsed_version.base_version.split(".")[:2])
# The full version, including alpha/beta/rc tags.
# Removes post from release name
release = (
    parsed_version.base_version 
    if parsed_version.is_postrelease else
    raw_version
)

##########################################################################
## General configuration
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration
##########################################################################

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    # Built-in extensions
    "sphinx.ext.autodoc",           # Include documentation from docstrings
    # "sphinx.ext.autosectionlabel",  # Allow reference sections using its title
    "sphinx.ext.autosummary",       # Generate autodoc summaries
    # "sphinx.ext.coverage",          # Collect doc coverage stats
    "sphinx.ext.doctest",           # Test snippets in the documentation
    # "sphinx.ext.duration",          # Measure durations of Sphinx processing
    # "sphinx.ext.extlinks",          # Markup to shorten external links
    # "sphinx.ext.githubpages",       # Publish HTML docs in GitHub Pages
    # "sphinx.ext.graphviz",          # Add Graphviz graphs
    # "sphinx.ext.ifconfig",          # Include content based on configuration
    "sphinx.ext.imgconverter",      # A reference image converter using Imagemagick
    # "sphinx.ext.inheritance_diagram",  # Include inheritance diagrams
    "sphinx.ext.intersphinx",       # Link to other projects’ documentation
    "sphinx.ext.linkcode",          # Add external links to source code    
    'sphinx.ext.napoleon',          # Support for NumPy and Google style docstrings
    "numpydoc",                     # Support for NumPy-style docstrings (alternative to Napoleon).
    # "sphinx.ext.todo",              # Support for todo items
    # 'sphinx.ext.viewcode',          # Add links to highlighted source code

    # Third-party extensions
    # https://sphinx-extensions.readthedocs.io/en/latest/
    "sphinx-prompt",                # Add prompts and outputs to your documentation (useful for interactive sessions).
    "sphinx_copybutton",            # Add a "copy" button to code blocks in the documentation.
    # 'myst_parser',                  # Markdown parser (.md files) with Sphinx
    # 'nbsphinx',                     # to publish Jupyter notebooks as documentation pages.
    "sphinxext.opengraph",          # Add OpenGraph metadata for better sharing of documentation.
    
    # 'sphinx_tabs.tabs',
    "sphinx_design",                # Add design components and elements to documentation.
    "sphinx_remove_toctrees",       # Remove certain TOC trees from specific documentation pages.
    "sphinx_gallery.gen_gallery",   # Create galleries of example scripts and figures.
    "sphinxcontrib.sass",           # Support for SASS stylesheets in Sphinx documentation.
    "matplotlib.sphinxext.plot_directive",  # Integrate Matplotlib plots into documentation.
    
    # sklearn: Custom extensions
    "_sphinx_ext.sklearn_ext.allow_nan_estimators",         # Custom extension for handling NaN values in estimators.
    "_sphinx_ext.sklearn_ext.autoshortsummary",             # Custom extension for generating short summaries.
    "_sphinx_ext.sklearn_ext.doi_role",                     # Custom extension for handling DOI references.
    "_sphinx_ext.sklearn_ext.dropdown_anchors",             # Custom extension for dropdown navigation anchors.
    "_sphinx_ext.sklearn_ext.move_gallery_links",           # Custom extension for rearranging gallery links.
    "_sphinx_ext.sklearn_ext.override_pst_pagetoc",         # Custom extension for overriding page TOC in certain cases.
    "_sphinx_ext.sklearn_ext.sphinx_issues",                # Custom extension for managing and displaying issues.
    "_sphinx_ext.sklearn_ext.search_filter",                # Custom extension
    "_sphinx_ext.sklearn_ext.add_js_css_files",             # Custom extension
]
# -- Sitemap -----------------------------------------------------------------
# ReadTheDocs has its own way of generating sitemaps, etc.
# if not os.environ.get("READTHEDOCS"):
#     extensions += ["sphinx_sitemap"]
#     html_baseurl = os.environ.get("SITEMAP_URL_BASE", "http://127.0.0.1:8000/")
#     sitemap_locales = [None]
#     sitemap_url_scheme = "{link}"

# For maths, use mathjax by default and svg if NO_MATHJAX env variable is set
# (useful for viewing the doc offline)
if os.environ.get("NO_MATHJAX"):
    extensions.append("sphinx.ext.imgmath")
    imgmath_image_format = "svg"
    mathjax_path = ""
else:
    # Render mathematical expressions using MathJax.
    extensions.append("sphinx.ext.mathjax")
    mathjax_path = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"

try:
    import jupyterlite_sphinx  # noqa: F401
    
    extensions.append("jupyter_sphinx")
    extensions.append("jupyterlite_sphinx")    
    
    with_jupyterlite = True
except ImportError:
    # In some cases we don't want to require jupyterlite_sphinx to be installed,
    # e.g. the doc-min-dependencies build
    warnings.warn(
        "jupyterlite_sphinx is not installed, you need to install it "
        "if you want JupyterLite links to appear in each example"
    )
    with_jupyterlite = False

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'
# 
# Option 2: Use today's date in the specified format
today_fmt = '%B %d, %Y'
today = datetime.today().strftime(today_fmt)

##########################################################################
### Options for highlighting
##########################################################################

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = "sphinx"

##########################################################################
### Options for HTTP requests
##########################################################################

# Use a browser-like user agent to avoid some "403 Client Error: Forbidden for
# url" errors. This is taken from the variable navigator.userAgent inside a
# browser console.
user_agent = (
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0"
)

##########################################################################
### Options for internationalisation
##########################################################################

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'  # default

##########################################################################
### Options for markup
##########################################################################

# The reST default role (used for this markup: `text`) for all docs.
# default_role = None
default_role = "literal"

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

##########################################################################
### Options for object signatures
##########################################################################

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True
add_function_parentheses = False

##########################################################################
### Options for source files
##########################################################################

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
# Exclude patterns for files and directories to ignore when looking for source files
exclude_patterns = [
    '**/.git',       # Ignores all .git directories
    '**.ipynb_checkpoints',
    "**/sg_execution_times.rst",
    'build',         # Ignore the _build directory where generated files are stored
    '_build',        # Ignore the _build directory where generated files are stored
    "_templates",
    'Thumbs.db',     # Ignore Thumbs.db (used by Windows Explorer)
    '.DS_Store',     # Ignore .DS_Store (used by macOS Finder)
    'venv',          # Ignore virtual environment directory (if applicable)
    'env',           # Ignore virtual environment directory (if applicable)
]

# The master toctree document.
# Added in version 4.0: The root_doc alias.
master_doc = 'index'

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = '.rst'
# source_suffix = {
#     '.rst': 'restructuredtext',
#     '.md': 'markdown',
#     '.txt': 'markdown',
# }

##########################################################################
### Options for templating
##########################################################################

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

##########################################################################
## Builder options
# https://www.sphinx-doc.org/en/master/usage/configuration.html#builder-options
##########################################################################

##########################################################################
### Options for HTML output
##########################################################################

# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
#
# https://sphinx-themes.org/sample-sites/default-alabaster/
# html_theme = "alabaster"  # default
# https://sphinx-themes.org/sample-sites/sphinx-rtd-theme/
# html_theme = "sphinx_rtd_theme"  # yellowbrick
# https://sphinx-themes.org/sample-sites/pydata-sphinx-theme/
# https://pydata-sphinx-theme.readthedocs.io/en/latest/examples/gallery.html

# https://pydata-sphinx-theme.readthedocs.io/en/stable/examples/gallery.html#other-projects-using-this-theme
html_theme = "pydata_sphinx_theme"  # scikit-learn

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
html_theme_options = {
    # -- General configuration ------------------------------------------------
    "show_version_warning_banner": True,
    "surface_warnings": True,
    "logo": {
        "alt_text": "scikit-plots homepage",
        "image_relative": "logos/scikit-plots-logo-small.png",
        "image_light": "logos/scikit-plots-logo-small.png",
        "image_dark": "logos/scikit-plots-logo-small.png",
    },

    # -- Search and Edit ------------------------------------------------------
    "search_bar_text": "Search the docs ...",
    "use_edit_page_button": True,
    
    # -- Appearance Settings --------------------------------------------------
    "pygments_light_style": "tango",
    "pygments_dark_style": "monokai",
    # The switcher requires a JSON file with the list of documentation versions, which
    # is generated by the script `build_tools/circle/list_versions.py` and placed under
    # the `js/` static directory; it will then be copied to the `_static` directory in
    # the built documentation
    # https://pydata-sphinx-theme.readthedocs.io/en/latest/user_guide/version-dropdown.html#configure-switcher-json-url
    "switcher": {
        # "json_url": "https://scikit-plots.github.io/dev/_static/versions.json",
        "json_url": "https://scikit-plots.github.io/dev/_static/switcher.json",
        "version_match": release,
    },
    # check_switcher may be set to False if docbuild pipeline fails. See
    # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/version-dropdown.html#configure-switcher-json-url
    "check_switcher": True,

    # -- External and Icon Links ----------------------------------------------    
    "external_links": [],
    "icon_links_label": "Icon Links",
    "icon_links": [
        {
            "name": "GitHub",
            "url": "https://github.com/scikit-plots/scikit-plots",
            # "icon": "fa-brands fa-github",
            "icon": "fa-brands fa-square-github",
            "type": "fontawesome",
        },
        {
            "name": "PyPI",
            "url": "https://pypi.org/project/scikit-plots",
            "icon": "fa-brands fa-python",
            "type": "fontawesome",
        },
    ],
    # alternative way to set twitter and github header icons
    # "github_url": "https://github.com/scikit-plots/scikit-plots",
    # "repository_url": "https://github.com/jupyter/jupyter-sphinx",
    # "use_repository_button": True,
    # "repository_branch": "main",
    # "use_issues_button": True,
    # "use_fullscreen_button": False,
    
    # -- Header and Footer Settings -------------------------------------------   
    "header_links_before_dropdown": 5,
    "header_dropdown_text": "More", 
    "navbar_align": "left",
    "navbar_start": ["navbar-logo"],
    # Note that the alignment of navbar_center is controlled by navbar_align
    "navbar_center": ["navbar-nav"],
    "navbar_end": ["theme-switcher", "version-switcher", "navbar-icon-links"],
    # navbar_persistent is persistent right (even when on mobiles)
    # "navbar_persistent": ["search-button"],
    "content_footer_items": [],
    "footer_start": ["copyright"],
    "footer_center": [],
    "footer_end": [],
    
    # -- Article and Content Settings -----------------------------------------
    "article_header_start": ["breadcrumbs"],
    "article_header_end": [],
    "article_footer_items": ["prev-next"],
    
    # -- Navigation Settings --------------------------------------------------
    "sidebar_includehidden": True,
    "collapse_navigation": False,
    "navigation_depth": 2,
    "show_toc_level": 1,
    "show_nav_level": 1,
    # If "prev-next" is included in article_footer_items, then setting show_prev_next
    # to True would repeat prev and next links. See
    # https://github.com/pydata/pydata-sphinx-theme/blob/b731dc230bc26a3d1d1bb039c56c977a9b3d25d8/src/pydata_sphinx_theme/theme/pydata_sphinx_theme/layout.html#L118-L129
    "show_prev_next": False,
    "navigation_with_keys": False,
    
    # Use html_sidebars that map page patterns to list of sidebar templates
    "primary_sidebar_end": [],    
    # When specified as a dictionary, the keys should follow glob-style patterns, as in
    # https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-exclude_patterns
    # In particular, "**" specifies the default for all pages
    # Use :html_theme.sidebar_secondary.remove: for file-wide removal
    # "secondary_sidebar_items": {"**": ["page-toc", "sourcelink"]},
    "secondary_sidebar_items": {
        "**": [
            # "edit-this-page",
            "page-toc",
            "sourcelink",
            # "sg_download_links",
            # "sg_launcher_links",
        ],
    },
    
    # -- Announcement ---------------------------------------------------------
    "announcement": None,
    
    # "analytics": {
    #     "plausible_analytics_domain": "scikit-plots.github.io",
    #     "plausible_analytics_url": "https://views.scientific-python.org/js/script.js",
    # },
}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
# html_title = 'scikitplot v0.1'

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "logos/scikit-plots-favicon.ico"

# Additional CSS files, should be subset of the values of `sass_targets`
html_css_files = [
    "styles/colors.css",
    "styles/custom.css",
]

# Additional JS files
html_js_files = [
    "scripts/dropdown.js",
    "scripts/version-switcher.js",
]

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = [
    'images',
    'css',
    'js',
]

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = []

# If not None, a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# The empty string is equivalent to '%b %d, %Y'.
# html_last_updated_fmt = None

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}
# Custom sidebar templates, maps document names to template names.
# Workaround for removing the left sidebar on pages without TOC
# A better solution would be to follow the merge of:
# https://github.com/pydata/pydata-sphinx-theme/pull/1682
html_sidebars = {
    "community/faq": [],
    "community/scikiplot_glossary": [],
    "community/sklearn_glossary": [],
    "teams/about": [],
    "support": [],
    "governance": [],
    "roadmap": [],
    "related_projects": [],
}

# Additional templates that should be rendered to pages, maps page names to
# template names.
html_additional_pages = {
    "index": "index.html"
}

# If false, no module index is generated.
# html_domain_indices = True
# html_domain_indices = False

# If false, no index is generated.
# html_use_index = True
# html_use_index = False

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, the reST sources are included in the HTML build as _sources/name.
# html_copy_source = True

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = '.html'

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'r', 'sv', 'tr', 'zh'
# html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# 'ja' uses this config value.
# 'zh' user can custom change `jieba` dictionary path.
# html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
# html_search_scorer = 'scorer.js'

##########################################################################
### Options for HTML help output
##########################################################################

# Output file base name for HTML help builder.
# The default is the project name with spaces removed and doc appended.
# htmlhelp_basename = 'scikit-plotsdoc'

##########################################################################
### Options for LaTeX output
##########################################################################

# latex_elements = {
#     # The paper size ('letterpaper' or 'a4paper').    
#     'papersize': 'letterpaper',
    
#     # The font size ('10pt', '11pt' or '12pt').    
#     'pointsize': '10pt',
    
#     # Additional stuff for the LaTeX preamble.    
#     'preamble': '',
    
#     # Latex figure (float) alignment    
#     'figure_align': 'htbp',
# }

# Grouping the document tree into LaTeX files. List of tuples.
# latex_documents = [
#     (
#         master_doc,  # source start file
#         "scikitplot.tex",  # target name
#         "{} Documentation".format(project),  # title
#         author,  # author
#         "manual",  # documentclass [howto,manual, or own class]
#     )
# ]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

##########################################################################
### Options for manual page output
##########################################################################

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
# man_pages = [
#     (
#         master_doc,
#         project,
#         "{} Documentation".format(project),
#         [author],
#         1
#     )
# ]

# If true, show URL addresses after external links.
# man_show_urls = False

##########################################################################
### Options for Texinfo output
##########################################################################

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
# texinfo_documents = [
#     (
#         master_doc,
#         "scikitplot",
#         "{} Documentation".format(project),
#         author,
#         "scikitplot",
#         "Machine Learning Visualization with Python",
#         "Scientific Visualization",
#     )
# ]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'

##########################################################################
### Options for the linkcheck builder
##########################################################################

# Config for linkcheck that checks the documentation for broken links
# ignore all links in 'whats_new' to avoid doing many github requests and
# hitting the github rate threshold that makes linkcheck take a lot of time
linkcheck_exclude_documents = [r"whats_new/.*"]

# default timeout to make some sites links fail faster
linkcheck_timeout = 10

# Allow redirects from doi.org
linkcheck_allowed_redirects = {r"https://doi.org/.+": r".*"}
linkcheck_ignore = [
    # ignore links to local html files e.g. in image directive :target: field
    r"^..?/",
    # ignore links to specific pdf pages because linkcheck does not handle them
    # ('utf-8' codec can't decode byte error)
    # r"http://www.utstat.toronto.edu/~rsalakhu/sta4273/notes/Lecture2.pdf#page=.*",
    # (
    #     "https://www.fordfoundation.org/media/2976/roads-and-bridges"
    #     "-the-unseen-labor-behind-our-digital-infrastructure.pdf#page=.*"
    # ),
    # links falsely flagged as broken
    # (
    #     "https://www.researchgate.net/publication/"
    #     "233096619_A_Dendrite_Method_for_Cluster_Analysis"
    # ),
    # (
    #     "https://www.researchgate.net/publication/221114584_Random_Fourier"
    #     "_Approximations_for_Skewed_Multiplicative_Histogram_Kernels"
    # ),
    # (
    #     "https://www.researchgate.net/publication/4974606_"
    #     "Hedonic_housing_prices_and_the_demand_for_clean_air"
    # ),
    # (
    #     "https://www.researchgate.net/profile/Anh-Huy-Phan/publication/220241471_Fast_"
    #     "Local_Algorithms_for_Large_Scale_Nonnegative_Matrix_and_Tensor_Factorizations"
    # ),
    # "https://doi.org/10.13140/RG.2.2.35280.02565",
    # (
    #     "https://www.microsoft.com/en-us/research/uploads/prod/2006/01/"
    #     "Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf"
    # ),
    # "https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-99-87.pdf",
    # "https://microsoft.com/",
    # "https://www.jstor.org/stable/2984099",
    # "https://stat.uw.edu/sites/default/files/files/reports/2000/tr371.pdf",
    # # Broken links from testimonials
    # "http://www.bestofmedia.com",
    # "http://www.data-publica.com/",
    # "https://livelovely.com",
    # "https://www.mars.com/global",
    # "https://www.yhat.com",
    # # Ignore some dynamically created anchors. See
    # # https://github.com/sphinx-doc/sphinx/issues/9016 for more details about
    # # the github example
    # r"https://github.com/conda-forge/miniforge#miniforge",
    # r"https://github.com/joblib/threadpoolctl/"
    # "#setting-the-maximum-size-of-thread-pools",
    # r"https://stackoverflow.com/questions/5836335/"
    # "consistently-create-same-random-numpy-array/5837352#comment6712034_5837352",
]

# Use Github token from environment variable to avoid Github rate limits when
# checking Github links
github_token = os.getenv("GITHUB_TOKEN")

if github_token is None:
    linkcheck_request_headers = {}
else:
    linkcheck_request_headers = {
        "https://github.com/": {"Authorization": f"token {github_token}"},
    }

##########################################################################
## Domain options
# https://www.sphinx-doc.org/en/master/usage/configuration.html#domain-options
##########################################################################

##########################################################################
### Options for the Python domain
##########################################################################

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

##########################################################################
## Extension options
# https://www.sphinx-doc.org/en/master/usage/configuration.html#extension-options
##########################################################################

##########################################################################
### Extension: sphinx-remove-toctrees
##########################################################################

# Config for sphinx-remove-toctrees
remove_from_toctrees = [
    'README',
    'community/sklearn_glossary',
    # 'developers/index.rst',
]

##########################################################################
### Extension: intersphinx
##########################################################################

# intersphinx configuration
# Locations of objects.inv files for intersphinx extension that auto-links
# to external api docs.
intersphinx_mapping = {
    'IPython': ('https://ipython.readthedocs.io/en/stable/', None),
    "python": ("https://docs.python.org/{.major}".format(sys.version_info), None),
    "numpy": ("https://numpy.org/doc/stable", None),
    "scipy": ("https://docs.scipy.org/doc/scipy/", None),
    "pandas": ("https://pandas.pydata.org/pandas-docs/stable/", None),
    "matplotlib": ("https://matplotlib.org/", None),
    "seaborn": ("https://seaborn.pydata.org/", None),
    "sklearn": ("http://scikit-learn.org/stable/", None),
    "joblib": ("https://joblib.readthedocs.io/en/latest/", None),
    "skops": ("https://skops.readthedocs.io/en/stable/", None),
    "tensorflow": (
        "https://www.tensorflow.org/api_docs/python",
        "https://github.com/GPflow/tensorflow-intersphinx/raw/master/tf2_py_objects.inv"
    ),
    "flask": ("https://flask.palletsprojects.com/en/2.1.x/", None),
    "mlflow": ("https://mlflow.org/docs/latest/", None),
}

##########################################################################
### Extension: linkcode
##########################################################################

from _sphinx_ext.utils.github_link import make_linkcode_resolve
# The following is used by sphinx.ext.linkcode to provide links to github
linkcode_resolve = make_linkcode_resolve(
    "scikitplot",
    (
        "https://github.com/scikit-plots/"
        "scikit-plots/blob/{revision}/"
        "{package}/{path}#L{lineno}"
    ),
)

##########################################################################
### Extension: copybutton
##########################################################################

# Specify how to identify the prompt when copying code snippets
copybutton_prompt_text = r">>> |\.\.\. "
copybutton_prompt_is_regexp = True
copybutton_exclude = "style"

##########################################################################
### Extension: todo
##########################################################################

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

##########################################################################
### Extension: autosummary
##########################################################################

# generate autosummary even if no references
autosummary_generate = True
autoclass_content = "class"
autodoc_mock_imports = [
    "scikitplot",
    "numpy",
    "pandas",
    "scipy",
    "sklearn",
    "xgboost",
    "catboost",
    "tensorflow",
    "pytorch",
    "flask_sqlalchemy",
    "mlflow",
    "passlib",
]
# autodoc_inherit_docstrings = True
# autodoc_member_order = "bysource"
# autodoc_typehints = "signature"

# maps functions with a class name that is indistinguishable when case is
# ignore to another filename
# autosummary_filename_map = {
#     "sklearn.cluster.dbscan": "dbscan-function",
#     "sklearn.covariance.oas": "oas-function",
#     "sklearn.decomposition.fastica": "fastica-function",
# }

##########################################################################
### Extension: numpydoc
##########################################################################

# Autodoc requires numpy to skip class members otherwise we get an exception:
# toctree contains reference to nonexisting document
# See: https://github.com/phn/pytpm/issues/3#issuecomment-12133978
# We do not need the table of class members because `sphinxext/override_pst_pagetoc.py`
# will show them in the secondary sidebar
numpydoc_show_class_members = False
numpydoc_show_inherited_class_members = False
# We want in-page toc of class members instead of a separate page for each entry
numpydoc_class_members_toctree = False

# Produce `plot::` directives for examples that contain `import matplotlib` or
# `from matplotlib import`.
numpydoc_use_plots = True

##########################################################################
### Extension: sphinxext_plot_directive_api
##########################################################################

# Options for the `::plot` directive:
# https://matplotlib.org/stable/api/sphinxext_plot_directive_api.html
plot_formats = [
    "png",
    # "pdf",
    # ('hires.png', 350),
]
# By default, include the source code generating plots in documentation
plot_include_source = True
# Whether to show links to the files in HTML.
plot_html_show_formats = True
# Whether to show a link to the source in HTML.
plot_html_show_source_link = True

# A dictionary containing any non-standard rcParams that should be applied before each plot.
plot_rcparams = {
    "figure.figsize": (9, 6),
    "figure.dpi": 128,
}
# Code that should be executed before each plot.
plot_pre_code = (
    "import numpy as np\n"
    "import matplotlib.pyplot as plt\n"
)

##########################################################################
## Additional Options for HTML output
##########################################################################

# Compile scss files into css files using sphinxcontrib-sass
sass_src_dir, sass_out_dir = "scss", "css/styles"
sass_targets = {
    f"{file.stem}.scss": f"{file.stem}.css"
    for file in Path(sass_src_dir).glob("*.scss")
}

# Adds variables into templates
html_context = {
    # "github_user": "pydata",
    # "github_repo": "pydata-sphinx-theme",
    # "github_version": "main",
    # "doc_path": "docs",
}

# redirects dictionary maps from old links to new links
old_links = {
    # "documentation": "index",
}
html_context["redirects"] = old_links
for old_link in old_links:
    html_additional_pages[old_link] = "redirects.html"

# See https://github.com/scikit-learn/scikit-learn/pull/22550
html_context["is_devrelease"] = parsed_version.is_devrelease

##########################################################################
### binder_branch
##########################################################################

v = parse(release)
if v.release is None:
    raise ValueError(
        "Ill-formed version: {!r}. Version should follow PEP440".format(version)
    )

if v.is_devrelease:
    binder_branch = "main"
else:
    major, minor = v.release[:2]
    binder_branch = "{}.{}.X".format(major, minor)


##########################################################################
### Extension: sphinx_gallery_conf
##########################################################################

class SubSectionTitleOrder:
    """Sort example gallery by title of subsection.

    Assumes README.txt exists for all subsections and uses the subsection with
    dashes, '---', as the adornment.
    """

    def __init__(self, src_dir):
        self.src_dir = src_dir
        self.regex = re.compile(r"^([\w ]+)\n-", re.MULTILINE)

    def __repr__(self):
        return "<%s>" % (self.__class__.__name__,)

    def __call__(self, directory):
        src_path = os.path.normpath(os.path.join(self.src_dir, directory))

        # Forces Release Highlights to the top
        if os.path.basename(src_path) == "release_highlights":
            return "0"

        readme = os.path.join(src_path, "README.txt")

        try:
            with open(readme, "r") as f:
                content = f.read()
        except FileNotFoundError:
            return directory

        title_match = self.regex.search(content)
        if title_match is not None:
            return title_match.group(1)
        return directory


from sphinx_gallery.sorting import ExampleTitleSortKey
# https://sphinx-gallery.github.io/stable/gen_modules/sphinx_gallery.sorting.html#sphinx_gallery.sorting.ExampleTitleSortKey
class SKExampleTitleSortKey(ExampleTitleSortKey):
    """Sorts release highlights based on version number."""

    def __call__(self, filename):
        title = super().__call__(filename)
        prefix = "plot_release_highlights_"

        # Use title to sort if not a release highlight
        if not str(filename).startswith(prefix):
            return title

        major_minor = filename[len(prefix) :].split("_")[:2]
        version_float = float(".".join(major_minor))

        # negate to place the newest version highlights first
        return -version_float


# Paths for examples and gallery directories
sg_examples_dir = "../../examples"
sg_gallery_dir = "auto_examples"

# Sphinx Gallery Configuration
sphinx_gallery_conf = {
    # Paths for examples and gallery
    "examples_dirs": [sg_examples_dir],  # List of folders with example scripts
    "gallery_dirs": [sg_gallery_dir],    # List of folders where galleries will be generated
    # "filename_pattern": r'plot_.*',
    "backreferences_dir": os.path.join("modules", "generated"),
    
    # Basic settings
    "doc_module": ('scikitplot', 'sklearn'),
    "reference_url": {'scikitplot': None},
    "show_memory": False,  # Set to True if memory_profiler is available and needed

    # Binder integration
    "binder": {
        "org": "scikit-plots",
        "repo": "scikit-plots",
        "branch": binder_branch,  # Can be any branch, tag, or commit hash. Use a branch that hosts your docs.
        "binderhub_url": "https://mybinder.org",  # URL of a binderhub deployment
        "dependencies": "./binder/requirements.txt",
        # "notebooks_dir": "notebooks",
        "use_jupyter_lab": True,
    },

    # Additional options
    "inspect_global_variables": False,  # Avoid generating too many cross-links
    "remove_config_comments": True,
    "recommender": {"enable": True, "n_examples": 4, "min_df": 12},
    "reset_modules": (
        "matplotlib",
        "seaborn",
        "_sphinx_ext.utils.sg_doc_build.reset_others"
    ),

    # Optional sorting (uncomment if needed)
    "subsection_order": SubSectionTitleOrder(sg_examples_dir),
    "within_subsection_order": SKExampleTitleSortKey,
}
# Add JupyterLite configuration if enabled
if with_jupyterlite:
    sphinx_gallery_conf["jupyterlite"] = {
        "notebook_modification_function": "_sphinx_ext.utils.sg_doc_build.notebook_modification_function",
    }

# Secondary sidebar configuration for pages generated by sphinx-gallery

# For the index page of the gallery and each nested section, we hide the secondary
# sidebar by specifying an empty list (no components), because there is no meaningful
# in-page toc for these pages, and they are generated so "sourcelink" is not useful
# either.

# For each example page we keep default ["page-toc", "sourcelink"] specified by the
# "**" key. "page-toc" is wanted for these pages. "sourcelink" is also necessary since
# otherwise the secondary sidebar will degenerate when "page-toc" is empty, and the
# script `sphinxext/move_gallery_links.py` will fail (it assumes the existence of the
# secondary sidebar). The script will remove "sourcelink" in the end.

html_theme_options["secondary_sidebar_items"][f"{sg_gallery_dir}/index"] = []
for sub_sg_dir in (Path(".") / sg_examples_dir).iterdir():
    if sub_sg_dir.is_dir():
        html_theme_options["secondary_sidebar_items"][
            f"{sg_gallery_dir}/{sub_sg_dir.name}/index"
        ] = []


##########################################################################
### Extension: sphinx_gallery_conf
##########################################################################

# Config for sphinxext.opengraph

ogp_site_url = "https://scikit-plots.github.io/stable/"
ogp_image = "https://scikit-plots.github.io/stable/_static/scikit-plots-logo-small.png"
ogp_use_first_image = True
ogp_site_name = "scikit-plots"


##########################################################################
### Extension: _sphinxext
##########################################################################

# Config for sphinx_issues
# we use the issues path for PRs since the issues URL will forward
issues_github_path = "scikit-plots/scikit-plots"


##########################################################################
### infer_next_release_versions
##########################################################################

def infer_next_release_versions():
    """
    Infer the most likely next release versions to make.
    """
    all_version_full = {"rc": "0.99.0rc1", "final": "0.99.0", "bf": "0.98.1"}
    all_version_short = {"rc": "0.99", "final": "0.99", "bf": "0.98"}
    all_previous_tag = {"rc": "unused", "final": "0.98.33", "bf": "0.97.22"}

    try:
        # Fetch the version switcher JSON; see `html_theme_options` for more details
        versions_json = json.loads(
            urlopen(html_theme_options["switcher"]["json_url"], timeout=10).read()
        )

        # See `build_tools/circle/list_versions.py`, stable is always the second entry
        stable_version = parse(versions_json[1]["version"])
        last_stable_version = parse(versions_json[2]["version"])
        next_major_minor = f"{stable_version.major}.{stable_version.minor + 1}"

        # RC
        all_version_full["rc"] = f"{next_major_minor}.0rc1"
        all_version_short["rc"] = next_major_minor

        # Major/Minor final
        all_version_full["final"] = f"{next_major_minor}.0"
        all_version_short["final"] = next_major_minor
        all_previous_tag["final"] = stable_version.base_version

        # Bug-fix
        all_version_full["bf"] = (
            f"{stable_version.major}.{stable_version.minor}.{stable_version.micro + 1}"
        )
        all_version_short["bf"] = f"{stable_version.major}.{stable_version.minor}"
        all_previous_tag["bf"] = last_stable_version.base_version
    except Exception as e:
        logger.warning(
            "Failed to infer all possible next release versions because of "
            f"{type(e).__name__}: {e}"
        )

    return {
        "version_full": all_version_full,
        "version_short": all_version_short,
        "previous_tag": all_previous_tag,
    }


##########################################################################
## Convert .rst.template files to .rst
##########################################################################

from api_reference import API_REFERENCE, DEPRECATED_API_REFERENCE

# If development build, link to local page in the top navbar; otherwise link to the
# development version; see https://github.com/scikit-learn/scikit-learn/pull/22550
development_link = (
    "developers/index" 
    if parsed_version.is_devrelease else 
    "https://scikit-plots.github.io/dev/developers/index.html"
)

# Define the templates and target files for conversion
# Each entry is in the format (template name, file name, kwargs for rendering)
rst_templates = [
    (
        "index",
        "index",
        {
            "development_link": development_link
        }
    ),
    (
        "developers/maintainer",
        "developers/maintainer",
        {"inferred": infer_next_release_versions()},
    ),
    # (
    #     "min_dependency_table",
    #     "min_dependency_table",
    #     {"dependent_packages": {} },
    # ),
    # (
    #     "min_dependency_substitutions",
    #     "min_dependency_substitutions",
    #     {"dependent_packages": {} },
    # ),
    (
        "api/index",
        "api/index",
        {
            "API_REFERENCE": sorted(API_REFERENCE.items(), key=lambda x: x[0]),
            "DEPRECATED_API_REFERENCE": sorted(
                DEPRECATED_API_REFERENCE.items(), key=lambda x: x[0], reverse=True
            ),
        },
    ),
]

# Convert each module API reference page
for module in API_REFERENCE:
    rst_templates.append(
        (
            "api/module",
            f"api/{module}",
            {
                "module": module,
                "module_info": API_REFERENCE[module]
            },
        )
    )

# Convert the deprecated API reference page (if there exists any)
if DEPRECATED_API_REFERENCE:
    rst_templates.append(
        (
            "api/deprecated",
            "api/deprecated",
            {
                "DEPRECATED_API_REFERENCE": sorted(
                    DEPRECATED_API_REFERENCE.items(), key=lambda x: x[0], reverse=True
                )
            },
        )
    )

for rst_template_name, rst_target_name, kwargs in rst_templates:
    # Read the corresponding template file into jinja2
    with (Path(".") / f"{rst_template_name}.rst.template").open(
        "r", encoding="utf-8"
    ) as f:
        t = jinja2.Template(f.read())

    # Render the template and write to the target
    with (Path(".") / f"{rst_target_name}.rst").open("w", encoding="utf-8") as f:
        f.write(t.render(**kwargs))